import {
  require_data,
  require_interopRequireDefault,
  require_toPropertyKey,
  require_utils
} from "./chunk-JAH63LOZ.js";
import {
  require_prop_types
} from "./chunk-6IJE4OMF.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __commonJS
} from "./chunk-ROME4SDB.js";

// node_modules/@babel/runtime/helpers/extends.js
var require_extends = __commonJS({
  "node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
    function _extends() {
      return module.exports = _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e];
          for (var r in t)
            ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
        }
        return n;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _extends.apply(null, arguments);
    }
    module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperty(e, r, t) {
      return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
        value: t,
        enumerable: true,
        configurable: true,
        writable: true
      }) : e[r] = t, e;
    }
    module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/emoji-mart/dist/utils/shared-props.js
var require_shared_props = __commonJS({
  "node_modules/emoji-mart/dist/utils/shared-props.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PickerPropTypes = exports.EmojiPropTypes = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    var EmojiPropTypes = {
      data: _propTypes["default"].object.isRequired,
      onOver: _propTypes["default"].func,
      onLeave: _propTypes["default"].func,
      onClick: _propTypes["default"].func,
      fallback: _propTypes["default"].func,
      backgroundImageFn: _propTypes["default"].func,
      "native": _propTypes["default"].bool,
      forceSize: _propTypes["default"].bool,
      tooltip: _propTypes["default"].bool,
      useButton: _propTypes["default"].bool,
      skin: _propTypes["default"].oneOf([1, 2, 3, 4, 5, 6]),
      sheetSize: _propTypes["default"].oneOf([16, 20, 32, 64]),
      sheetColumns: _propTypes["default"].number,
      sheetRows: _propTypes["default"].number,
      set: _propTypes["default"].oneOf(["apple", "google", "twitter", "facebook"]),
      size: _propTypes["default"].number.isRequired,
      emoji: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]).isRequired
    };
    exports.EmojiPropTypes = EmojiPropTypes;
    var PickerPropTypes = {
      onClick: _propTypes["default"].func,
      onSelect: _propTypes["default"].func,
      onSkinChange: _propTypes["default"].func,
      perLine: _propTypes["default"].number,
      emojiSize: _propTypes["default"].number,
      i18n: _propTypes["default"].object,
      style: _propTypes["default"].object,
      title: _propTypes["default"].string,
      emoji: _propTypes["default"].string,
      color: _propTypes["default"].string,
      set: EmojiPropTypes.set,
      skin: EmojiPropTypes.skin,
      "native": _propTypes["default"].bool,
      backgroundImageFn: EmojiPropTypes.backgroundImageFn,
      sheetSize: EmojiPropTypes.sheetSize,
      emojisToShowFilter: _propTypes["default"].func,
      showPreview: _propTypes["default"].bool,
      showSkinTones: _propTypes["default"].bool,
      emojiTooltip: EmojiPropTypes.tooltip,
      useButton: EmojiPropTypes.useButton,
      theme: _propTypes["default"].oneOf(["auto", "light", "dark"]),
      include: _propTypes["default"].arrayOf(_propTypes["default"].string),
      exclude: _propTypes["default"].arrayOf(_propTypes["default"].string),
      recent: _propTypes["default"].arrayOf(_propTypes["default"].string),
      autoFocus: _propTypes["default"].bool,
      enableFrequentEmojiSort: _propTypes["default"].bool,
      custom: _propTypes["default"].arrayOf(_propTypes["default"].shape({
        name: _propTypes["default"].string.isRequired,
        short_names: _propTypes["default"].arrayOf(_propTypes["default"].string).isRequired,
        emoticons: _propTypes["default"].arrayOf(_propTypes["default"].string),
        keywords: _propTypes["default"].arrayOf(_propTypes["default"].string),
        imageUrl: _propTypes["default"].string,
        spriteUrl: _propTypes["default"].string,
        sheet_x: _propTypes["default"].number,
        sheet_y: _propTypes["default"].number,
        size: _propTypes["default"].number,
        sheetColumns: _propTypes["default"].number,
        sheetRows: _propTypes["default"].number
      })),
      skinEmoji: _propTypes["default"].string,
      notFound: _propTypes["default"].func,
      notFoundEmoji: _propTypes["default"].string,
      icons: _propTypes["default"].object
    };
    exports.PickerPropTypes = PickerPropTypes;
  }
});

// node_modules/emoji-mart/dist/utils/shared-default-props.js
var require_shared_default_props = __commonJS({
  "node_modules/emoji-mart/dist/utils/shared-default-props.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EmojiDefaultProps = exports.PickerDefaultProps = void 0;
    var EmojiDefaultProps = {
      skin: 1,
      set: "apple",
      sheetSize: 64,
      sheetColumns: 57,
      sheetRows: 57,
      "native": false,
      forceSize: false,
      tooltip: false,
      useButton: true,
      backgroundImageFn: function backgroundImageFn(set, sheetSize) {
        return "https://unpkg.com/emoji-datasource-".concat(set, "@").concat("5.0.1", "/img/").concat(set, "/sheets-256/").concat(sheetSize, ".png");
      }
    };
    exports.EmojiDefaultProps = EmojiDefaultProps;
    var PickerDefaultProps = {
      onClick: function onClick() {
      },
      onSelect: function onSelect() {
      },
      onSkinChange: function onSkinChange() {
      },
      emojiSize: 24,
      perLine: 9,
      i18n: {},
      style: {},
      title: "Emoji Martâ„¢",
      emoji: "department_store",
      color: "#ae65c5",
      set: EmojiDefaultProps.set,
      theme: "light",
      skin: null,
      defaultSkin: EmojiDefaultProps.skin,
      "native": EmojiDefaultProps["native"],
      sheetSize: EmojiDefaultProps.sheetSize,
      backgroundImageFn: EmojiDefaultProps.backgroundImageFn,
      emojisToShowFilter: null,
      showPreview: true,
      showSkinTones: true,
      emojiTooltip: EmojiDefaultProps.tooltip,
      useButton: EmojiDefaultProps.useButton,
      autoFocus: false,
      enableFrequentEmojiSort: false,
      custom: [],
      skinEmoji: "",
      notFound: function notFound() {
      },
      notFoundEmoji: "sleuth_or_spy",
      icons: {}
    };
    exports.PickerDefaultProps = PickerDefaultProps;
  }
});

// node_modules/emoji-mart/dist/components/emoji/nimble-emoji.js
var require_nimble_emoji = __commonJS({
  "node_modules/emoji-mart/dist/components/emoji/nimble-emoji.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _utils = require_utils();
    var _data = require_data();
    var _sharedProps = require_shared_props();
    var _sharedDefaultProps = require_shared_default_props();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var _getData = function _getData2(props) {
      var emoji = props.emoji, skin = props.skin, set = props.set, data = props.data;
      return (0, _utils.getData)(emoji, skin, set, data);
    };
    var _getPosition = function _getPosition2(props) {
      var _getData2 = _getData(props), sheet_x = _getData2.sheet_x, sheet_y = _getData2.sheet_y, multiplyX = 100 / (props.sheetColumns - 1), multiplyY = 100 / (props.sheetRows - 1);
      return "".concat(multiplyX * sheet_x, "% ").concat(multiplyY * sheet_y, "%");
    };
    var _getSanitizedData = function _getSanitizedData2(props) {
      var emoji = props.emoji, skin = props.skin, set = props.set, data = props.data;
      return (0, _utils.getSanitizedData)(emoji, skin, set, data);
    };
    var _handleClick = function _handleClick2(e, props) {
      if (!props.onClick) {
        return;
      }
      var onClick = props.onClick, emoji = _getSanitizedData(props);
      onClick(emoji, e);
    };
    var _handleOver = function _handleOver2(e, props) {
      if (!props.onOver) {
        return;
      }
      var onOver = props.onOver, emoji = _getSanitizedData(props);
      onOver(emoji, e);
    };
    var _handleLeave = function _handleLeave2(e, props) {
      if (!props.onLeave) {
        return;
      }
      var onLeave = props.onLeave, emoji = _getSanitizedData(props);
      onLeave(emoji, e);
    };
    var _isNumeric = function _isNumeric2(value) {
      return !isNaN(value - parseFloat(value));
    };
    var _convertStyleToCSS = function _convertStyleToCSS2(style) {
      var div = document.createElement("div");
      for (var key in style) {
        var value = style[key];
        if (_isNumeric(value)) {
          value += "px";
        }
        div.style[key] = value;
      }
      return div.getAttribute("style");
    };
    var NimbleEmoji = function NimbleEmoji2(props) {
      if (props.data.compressed) {
        (0, _data.uncompress)(props.data);
      }
      for (var k in NimbleEmoji2.defaultProps) {
        if (props[k] == void 0 && NimbleEmoji2.defaultProps[k] != void 0) {
          props[k] = NimbleEmoji2.defaultProps[k];
        }
      }
      var data = _getData(props);
      if (!data) {
        if (props.fallback) {
          return props.fallback(null, props);
        } else {
          return null;
        }
      }
      var unified = data.unified, custom = data.custom, short_names = data.short_names, imageUrl = data.imageUrl, style = {}, children = props.children, className = "emoji-mart-emoji", nativeEmoji = unified && (0, _utils.unifiedToNative)(unified), label = [nativeEmoji].concat(short_names).filter(Boolean).join(", "), title = null;
      if (!unified && !custom) {
        if (props.fallback) {
          return props.fallback(data, props);
        } else {
          return null;
        }
      }
      if (props.tooltip) {
        title = short_names[0];
      }
      if (props["native"] && unified) {
        className += " emoji-mart-emoji-native";
        style = {
          fontSize: props.size
        };
        children = nativeEmoji;
        if (props.forceSize) {
          style.display = "inline-block";
          style.width = props.size;
          style.height = props.size;
          style.wordBreak = "keep-all";
        }
      } else if (custom) {
        className += " emoji-mart-emoji-custom";
        style = {
          width: props.size,
          height: props.size,
          display: "inline-block"
        };
        if (data.spriteUrl) {
          style = _objectSpread({}, style, {
            backgroundImage: "url(".concat(data.spriteUrl, ")"),
            backgroundSize: "".concat(100 * props.sheetColumns, "% ").concat(100 * props.sheetRows, "%"),
            backgroundPosition: _getPosition(props)
          });
        } else {
          style = _objectSpread({}, style, {
            backgroundImage: "url(".concat(imageUrl, ")"),
            backgroundSize: "contain",
            backgroundRepeat: "no-repeat",
            backgroundPosition: "center"
          });
        }
      } else {
        var setHasEmoji = data["has_img_".concat(props.set)] == void 0 || data["has_img_".concat(props.set)];
        if (!setHasEmoji) {
          if (props.fallback) {
            return props.fallback(data, props);
          } else {
            return null;
          }
        } else {
          style = {
            width: props.size,
            height: props.size,
            display: "inline-block",
            backgroundImage: "url(".concat(props.backgroundImageFn(props.set, props.sheetSize), ")"),
            backgroundSize: "".concat(100 * props.sheetColumns, "% ").concat(100 * props.sheetRows, "%"),
            backgroundPosition: _getPosition(props)
          };
        }
      }
      var Tag = {
        name: "span",
        props: {}
      };
      if (props.onClick && props.useButton) {
        Tag.name = "button";
        Tag.props = {
          type: "button"
        };
      }
      if (props.html) {
        style = _convertStyleToCSS(style);
        return "<".concat(Tag.name, " style='").concat(style, "' aria-label='").concat(label, "' ").concat(title ? "title='".concat(title, "'") : "", " class='").concat(className, "'>").concat(children || "", "</").concat(Tag.name, ">");
      } else {
        return _react["default"].createElement(Tag.name, (0, _extends2["default"])({
          onClick: function onClick(e) {
            return _handleClick(e, props);
          },
          onMouseEnter: function onMouseEnter(e) {
            return _handleOver(e, props);
          },
          onMouseLeave: function onMouseLeave(e) {
            return _handleLeave(e, props);
          },
          "aria-label": label,
          title,
          className
        }, Tag.props), _react["default"].createElement("span", {
          style
        }, children));
      }
    };
    NimbleEmoji.propTypes = _objectSpread({}, _sharedProps.EmojiPropTypes, {
      data: _propTypes["default"].object.isRequired
    });
    NimbleEmoji.defaultProps = _sharedDefaultProps.EmojiDefaultProps;
    var _default = NimbleEmoji;
    exports["default"] = _default;
  }
});

export {
  require_extends,
  require_defineProperty,
  require_shared_props,
  require_shared_default_props,
  require_nimble_emoji
};
//# sourceMappingURL=chunk-UOQ2NL57.js.map
