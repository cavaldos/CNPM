import {
  require_nimble_emoji_index
} from "./chunk-ICC6B6UK.js";
import {
  require_dayjs_min
} from "./chunk-DHH47WJI.js";
import {
  _arrayWithHoles,
  _assertThisInitialized,
  _classCallCheck,
  _createClass,
  _defineProperty,
  _getPrototypeOf,
  _inherits,
  _iterableToArray,
  _nonIterableRest,
  _possibleConstructorReturn,
  _typeof,
  _unsupportedIterableToArray
} from "./chunk-VGHAXWEW.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/dayjs/plugin/calendar.js
var require_calendar = __commonJS({
  "node_modules/dayjs/plugin/calendar.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_calendar = t2();
    }(exports, function() {
      "use strict";
      return function(e, t2, a) {
        var n = "h:mm A", d = { lastDay: "[Yesterday at] " + n, sameDay: "[Today at] " + n, nextDay: "[Tomorrow at] " + n, nextWeek: "dddd [at] " + n, lastWeek: "[Last] dddd [at] " + n, sameElse: "MM/DD/YYYY" };
        t2.prototype.calendar = function(e2, t3) {
          var n2 = t3 || this.$locale().calendar || d, o = a(e2 || void 0).startOf("d"), s = this.diff(o, "d", true), i = "sameElse", f = s < -6 ? i : s < -1 ? "lastWeek" : s < 0 ? "lastDay" : s < 1 ? "sameDay" : s < 2 ? "nextDay" : s < 7 ? "nextWeek" : i, l = n2[f] || d[f];
          return "function" == typeof l ? l.call(this, a()) : this.format(l);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/localizedFormat.js
var require_localizedFormat = __commonJS({
  "node_modules/dayjs/plugin/localizedFormat.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_localizedFormat = t2();
    }(exports, function() {
      "use strict";
      var e = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" };
      return function(t2, o, n) {
        var r = o.prototype, i = r.format;
        n.en.formats = e, r.format = function(t3) {
          void 0 === t3 && (t3 = "YYYY-MM-DDTHH:mm:ssZ");
          var o2 = this.$locale().formats, n2 = function(t4, o3) {
            return t4.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t5, n3, r2) {
              var i2 = r2 && r2.toUpperCase();
              return n3 || o3[r2] || e[r2] || o3[i2].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t6, o4) {
                return t6 || o4.slice(1);
              });
            });
          }(t3, void 0 === o2 ? {} : o2);
          return i.call(this, n2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/updateLocale.js
var require_updateLocale = __commonJS({
  "node_modules/dayjs/plugin/updateLocale.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define(n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_updateLocale = n();
    }(exports, function() {
      "use strict";
      return function(e, n, t2) {
        t2.updateLocale = function(e2, n2) {
          var o = t2.Ls[e2];
          if (o)
            return (n2 ? Object.keys(n2) : []).forEach(function(e3) {
              o[e3] = n2[e3];
            }), o;
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/localeData.js
var require_localeData = __commonJS({
  "node_modules/dayjs/plugin/localeData.js"(exports, module) {
    !function(n, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (n = "undefined" != typeof globalThis ? globalThis : n || self).dayjs_plugin_localeData = e();
    }(exports, function() {
      "use strict";
      return function(n, e, t2) {
        var r = e.prototype, o = function(n2) {
          return n2 && (n2.indexOf ? n2 : n2.s);
        }, u = function(n2, e2, t3, r2, u2) {
          var i2 = n2.name ? n2 : n2.$locale(), a2 = o(i2[e2]), s2 = o(i2[t3]), f = a2 || s2.map(function(n3) {
            return n3.slice(0, r2);
          });
          if (!u2)
            return f;
          var d = i2.weekStart;
          return f.map(function(n3, e3) {
            return f[(e3 + (d || 0)) % 7];
          });
        }, i = function() {
          return t2.Ls[t2.locale()];
        }, a = function(n2, e2) {
          return n2.formats[e2] || function(n3) {
            return n3.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(n4, e3, t3) {
              return e3 || t3.slice(1);
            });
          }(n2.formats[e2.toUpperCase()]);
        }, s = function() {
          var n2 = this;
          return { months: function(e2) {
            return e2 ? e2.format("MMMM") : u(n2, "months");
          }, monthsShort: function(e2) {
            return e2 ? e2.format("MMM") : u(n2, "monthsShort", "months", 3);
          }, firstDayOfWeek: function() {
            return n2.$locale().weekStart || 0;
          }, weekdays: function(e2) {
            return e2 ? e2.format("dddd") : u(n2, "weekdays");
          }, weekdaysMin: function(e2) {
            return e2 ? e2.format("dd") : u(n2, "weekdaysMin", "weekdays", 2);
          }, weekdaysShort: function(e2) {
            return e2 ? e2.format("ddd") : u(n2, "weekdaysShort", "weekdays", 3);
          }, longDateFormat: function(e2) {
            return a(n2.$locale(), e2);
          }, meridiem: this.$locale().meridiem, ordinal: this.$locale().ordinal };
        };
        r.localeData = function() {
          return s.bind(this)();
        }, t2.localeData = function() {
          var n2 = i();
          return { firstDayOfWeek: function() {
            return n2.weekStart || 0;
          }, weekdays: function() {
            return t2.weekdays();
          }, weekdaysShort: function() {
            return t2.weekdaysShort();
          }, weekdaysMin: function() {
            return t2.weekdaysMin();
          }, months: function() {
            return t2.months();
          }, monthsShort: function() {
            return t2.monthsShort();
          }, longDateFormat: function(e2) {
            return a(n2, e2);
          }, meridiem: n2.meridiem, ordinal: n2.ordinal };
        }, t2.months = function() {
          return u(i(), "months");
        }, t2.monthsShort = function() {
          return u(i(), "monthsShort", "months", 3);
        }, t2.weekdays = function(n2) {
          return u(i(), "weekdays", null, null, n2);
        }, t2.weekdaysShort = function(n2) {
          return u(i(), "weekdaysShort", "weekdays", 3, n2);
        }, t2.weekdaysMin = function(n2) {
          return u(i(), "weekdaysMin", "weekdays", 2, n2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/relativeTime.js
var require_relativeTime = __commonJS({
  "node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
    !function(r, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (r = "undefined" != typeof globalThis ? globalThis : r || self).dayjs_plugin_relativeTime = e();
    }(exports, function() {
      "use strict";
      return function(r, e, t2) {
        r = r || {};
        var n = e.prototype, o = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
        function i(r2, e2, t3, o2) {
          return n.fromToBase(r2, e2, t3, o2);
        }
        t2.en.relativeTime = o, n.fromToBase = function(e2, n2, i2, d2, u) {
          for (var f, a, s, l = i2.$locale().relativeTime || o, h = r.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m = h.length, c = 0; c < m; c += 1) {
            var y = h[c];
            y.d && (f = d2 ? t2(e2).diff(i2, y.d, true) : i2.diff(e2, y.d, true));
            var p = (r.rounding || Math.round)(Math.abs(f));
            if (s = f > 0, p <= y.r || !y.r) {
              p <= 1 && c > 0 && (y = h[c - 1]);
              var v = l[y.l];
              u && (p = u("" + p)), a = "string" == typeof v ? v.replace("%d", p) : v(p, n2, y.l, s);
              break;
            }
          }
          if (n2)
            return a;
          var M = s ? l.future : l.past;
          return "function" == typeof M ? M(a) : M.replace("%s", a);
        }, n.to = function(r2, e2) {
          return i(r2, e2, this, true);
        }, n.from = function(r2, e2) {
          return i(r2, e2, this);
        };
        var d = function(r2) {
          return r2.$u ? t2.utc() : t2();
        };
        n.toNow = function(r2) {
          return this.to(d(this), r2);
        }, n.fromNow = function(r2) {
          return this.from(d(this), r2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/utc.js
var require_utc = __commonJS({
  "node_modules/dayjs/plugin/utc.js"(exports, module) {
    !function(t2, i) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = i() : "function" == typeof define && define.amd ? define(i) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs_plugin_utc = i();
    }(exports, function() {
      "use strict";
      var t2 = "minute", i = /[+-]\d\d(?::?\d\d)?/g, e = /([+-]|\d\d)/g;
      return function(s, f, n) {
        var u = f.prototype;
        n.utc = function(t3) {
          var i2 = { date: t3, utc: true, args: arguments };
          return new f(i2);
        }, u.utc = function(i2) {
          var e2 = n(this.toDate(), { locale: this.$L, utc: true });
          return i2 ? e2.add(this.utcOffset(), t2) : e2;
        }, u.local = function() {
          return n(this.toDate(), { locale: this.$L, utc: false });
        };
        var o = u.parse;
        u.parse = function(t3) {
          t3.utc && (this.$u = true), this.$utils().u(t3.$offset) || (this.$offset = t3.$offset), o.call(this, t3);
        };
        var r = u.init;
        u.init = function() {
          if (this.$u) {
            var t3 = this.$d;
            this.$y = t3.getUTCFullYear(), this.$M = t3.getUTCMonth(), this.$D = t3.getUTCDate(), this.$W = t3.getUTCDay(), this.$H = t3.getUTCHours(), this.$m = t3.getUTCMinutes(), this.$s = t3.getUTCSeconds(), this.$ms = t3.getUTCMilliseconds();
          } else
            r.call(this);
        };
        var a = u.utcOffset;
        u.utcOffset = function(s2, f2) {
          var n2 = this.$utils().u;
          if (n2(s2))
            return this.$u ? 0 : n2(this.$offset) ? a.call(this) : this.$offset;
          if ("string" == typeof s2 && (s2 = function(t3) {
            void 0 === t3 && (t3 = "");
            var s3 = t3.match(i);
            if (!s3)
              return null;
            var f3 = ("" + s3[0]).match(e) || ["-", 0, 0], n3 = f3[0], u3 = 60 * +f3[1] + +f3[2];
            return 0 === u3 ? 0 : "+" === n3 ? u3 : -u3;
          }(s2), null === s2))
            return this;
          var u2 = Math.abs(s2) <= 16 ? 60 * s2 : s2, o2 = this;
          if (f2)
            return o2.$offset = u2, o2.$u = 0 === s2, o2;
          if (0 !== s2) {
            var r2 = this.$u ? this.toDate().getTimezoneOffset() : -1 * this.utcOffset();
            (o2 = this.local().add(u2 + r2, t2)).$offset = u2, o2.$x.$localOffset = r2;
          } else
            o2 = this.utc();
          return o2;
        };
        var h = u.format;
        u.format = function(t3) {
          var i2 = t3 || (this.$u ? "YYYY-MM-DDTHH:mm:ss[Z]" : "");
          return h.call(this, i2);
        }, u.valueOf = function() {
          var t3 = this.$utils().u(this.$offset) ? 0 : this.$offset + (this.$x.$localOffset || this.$d.getTimezoneOffset());
          return this.$d.valueOf() - 6e4 * t3;
        }, u.isUTC = function() {
          return !!this.$u;
        }, u.toISOString = function() {
          return this.toDate().toISOString();
        }, u.toString = function() {
          return this.toDate().toUTCString();
        };
        var l = u.toDate;
        u.toDate = function(t3) {
          return "s" === t3 && this.$offset ? n(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate() : l.call(this);
        };
        var c = u.diff;
        u.diff = function(t3, i2, e2) {
          if (t3 && this.$u === t3.$u)
            return c.call(this, t3, i2, e2);
          var s2 = this.local(), f2 = n(t3).local();
          return c.call(s2, f2, i2, e2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/timezone.js
var require_timezone = __commonJS({
  "node_modules/dayjs/plugin/timezone.js"(exports, module) {
    !function(t2, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs_plugin_timezone = e();
    }(exports, function() {
      "use strict";
      var t2 = { year: 0, month: 1, day: 2, hour: 3, minute: 4, second: 5 }, e = {};
      return function(n, i, o) {
        var r, a = function(t3, n2, i2) {
          void 0 === i2 && (i2 = {});
          var o2 = new Date(t3), r2 = function(t4, n3) {
            void 0 === n3 && (n3 = {});
            var i3 = n3.timeZoneName || "short", o3 = t4 + "|" + i3, r3 = e[o3];
            return r3 || (r3 = new Intl.DateTimeFormat("en-US", { hour12: false, timeZone: t4, year: "numeric", month: "2-digit", day: "2-digit", hour: "2-digit", minute: "2-digit", second: "2-digit", timeZoneName: i3 }), e[o3] = r3), r3;
          }(n2, i2);
          return r2.formatToParts(o2);
        }, u = function(e2, n2) {
          for (var i2 = a(e2, n2), r2 = [], u2 = 0; u2 < i2.length; u2 += 1) {
            var f2 = i2[u2], s2 = f2.type, m = f2.value, c = t2[s2];
            c >= 0 && (r2[c] = parseInt(m, 10));
          }
          var d = r2[3], l = 24 === d ? 0 : d, h = r2[0] + "-" + r2[1] + "-" + r2[2] + " " + l + ":" + r2[4] + ":" + r2[5] + ":000", v = +e2;
          return (o.utc(h).valueOf() - (v -= v % 1e3)) / 6e4;
        }, f = i.prototype;
        f.tz = function(t3, e2) {
          void 0 === t3 && (t3 = r);
          var n2, i2 = this.utcOffset(), a2 = this.toDate(), u2 = a2.toLocaleString("en-US", { timeZone: t3 }), f2 = Math.round((a2 - new Date(u2)) / 1e3 / 60), s2 = 15 * -Math.round(a2.getTimezoneOffset() / 15) - f2;
          if (!Number(s2))
            n2 = this.utcOffset(0, e2);
          else if (n2 = o(u2, { locale: this.$L }).$set("millisecond", this.$ms).utcOffset(s2, true), e2) {
            var m = n2.utcOffset();
            n2 = n2.add(i2 - m, "minute");
          }
          return n2.$x.$timezone = t3, n2;
        }, f.offsetName = function(t3) {
          var e2 = this.$x.$timezone || o.tz.guess(), n2 = a(this.valueOf(), e2, { timeZoneName: t3 }).find(function(t4) {
            return "timezonename" === t4.type.toLowerCase();
          });
          return n2 && n2.value;
        };
        var s = f.startOf;
        f.startOf = function(t3, e2) {
          if (!this.$x || !this.$x.$timezone)
            return s.call(this, t3, e2);
          var n2 = o(this.format("YYYY-MM-DD HH:mm:ss:SSS"), { locale: this.$L });
          return s.call(n2, t3, e2).tz(this.$x.$timezone, true);
        }, o.tz = function(t3, e2, n2) {
          var i2 = n2 && e2, a2 = n2 || e2 || r, f2 = u(+o(), a2);
          if ("string" != typeof t3)
            return o(t3).tz(a2);
          var s2 = function(t4, e3, n3) {
            var i3 = t4 - 60 * e3 * 1e3, o2 = u(i3, n3);
            if (e3 === o2)
              return [i3, e3];
            var r2 = u(i3 -= 60 * (o2 - e3) * 1e3, n3);
            return o2 === r2 ? [i3, o2] : [t4 - 60 * Math.min(o2, r2) * 1e3, Math.max(o2, r2)];
          }(o.utc(t3, i2).valueOf(), f2, a2), m = s2[0], c = s2[1], d = o(m).utcOffset(c);
          return d.$x.$timezone = a2, d;
        }, o.tz.guess = function() {
          return Intl.DateTimeFormat().resolvedOptions().timeZone;
        }, o.tz.setDefault = function(t3) {
          r = t3;
        };
      };
    });
  }
});

// node_modules/dayjs/locale/de.js
var require_de = __commonJS({
  "node_modules/dayjs/locale/de.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_de = n(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function n(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = n(e), a = { s: "ein paar Sekunden", m: ["eine Minute", "einer Minute"], mm: "%d Minuten", h: ["eine Stunde", "einer Stunde"], hh: "%d Stunden", d: ["ein Tag", "einem Tag"], dd: ["%d Tage", "%d Tagen"], M: ["ein Monat", "einem Monat"], MM: ["%d Monate", "%d Monaten"], y: ["ein Jahr", "einem Jahr"], yy: ["%d Jahre", "%d Jahren"] };
      function i(e2, n2, t3) {
        var i2 = a[t3];
        return Array.isArray(i2) && (i2 = i2[n2 ? 0 : 1]), i2.replace("%d", e2);
      }
      var r = { name: "de", weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sept._Okt._Nov._Dez.".split("_"), ordinal: function(e2) {
        return e2 + ".";
      }, weekStart: 1, yearStart: 4, formats: { LTS: "HH:mm:ss", LT: "HH:mm", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, relativeTime: { future: "in %s", past: "vor %s", s: i, m: i, mm: i, h: i, hh: i, d: i, dd: i, M: i, MM: i, y: i, yy: i } };
      return t2.default.locale(r, null, true), r;
    });
  }
});

// node_modules/dayjs/locale/es.js
var require_es = __commonJS({
  "node_modules/dayjs/locale/es.js"(exports, module) {
    !function(e, o) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = o(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], o) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_es = o(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function o(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var s = o(e), d = { name: "es", monthsShort: "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), weekStart: 1, formats: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, ordinal: function(e2) {
        return e2 + "º";
      } };
      return s.default.locale(d, null, true), d;
    });
  }
});

// node_modules/dayjs/locale/fr.js
var require_fr = __commonJS({
  "node_modules/dayjs/locale/fr.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_fr = n(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function n(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = n(e), i = { name: "fr", weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinal: function(e2) {
        return "" + e2 + (1 === e2 ? "er" : "");
      } };
      return t2.default.locale(i, null, true), i;
    });
  }
});

// node_modules/dayjs/locale/hi.js
var require_hi = __commonJS({
  "node_modules/dayjs/locale/hi.js"(exports, module) {
    !function(_23, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], e) : (_23 = "undefined" != typeof globalThis ? globalThis : _23 || self).dayjs_locale_hi = e(_23.dayjs);
    }(exports, function(_23) {
      "use strict";
      function e(_24) {
        return _24 && "object" == typeof _24 && "default" in _24 ? _24 : { default: _24 };
      }
      var t2 = e(_23), d = { name: "hi", weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"), weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"), monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), ordinal: function(_24) {
        return _24;
      }, formats: { LT: "A h:mm बजे", LTS: "A h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm बजे", LLLL: "dddd, D MMMM YYYY, A h:mm बजे" }, relativeTime: { future: "%s में", past: "%s पहले", s: "कुछ ही क्षण", m: "एक मिनट", mm: "%d मिनट", h: "एक घंटा", hh: "%d घंटे", d: "एक दिन", dd: "%d दिन", M: "एक महीने", MM: "%d महीने", y: "एक वर्ष", yy: "%d वर्ष" } };
      return t2.default.locale(d, null, true), d;
    });
  }
});

// node_modules/dayjs/locale/it.js
var require_it = __commonJS({
  "node_modules/dayjs/locale/it.js"(exports, module) {
    !function(e, o) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = o(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], o) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_it = o(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function o(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = o(e), n = { name: "it", weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"), weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"), weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"), months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), weekStart: 1, monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "tra %s", past: "%s fa", s: "qualche secondo", m: "un minuto", mm: "%d minuti", h: "un' ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, ordinal: function(e2) {
        return e2 + "º";
      } };
      return t2.default.locale(n, null, true), n;
    });
  }
});

// node_modules/dayjs/locale/ja.js
var require_ja = __commonJS({
  "node_modules/dayjs/locale/ja.js"(exports, module) {
    !function(e, _23) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = _23(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], _23) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_ja = _23(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function _23(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = _23(e), d = { name: "ja", weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"), weekdaysShort: "日_月_火_水_木_金_土".split("_"), weekdaysMin: "日_月_火_水_木_金_土".split("_"), months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), ordinal: function(e2) {
        return e2 + "日";
      }, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日 dddd HH:mm", l: "YYYY/MM/DD", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日(ddd) HH:mm" }, meridiem: function(e2) {
        return e2 < 12 ? "午前" : "午後";
      }, relativeTime: { future: "%s後", past: "%s前", s: "数秒", m: "1分", mm: "%d分", h: "1時間", hh: "%d時間", d: "1日", dd: "%d日", M: "1ヶ月", MM: "%dヶ月", y: "1年", yy: "%d年" } };
      return t2.default.locale(d, null, true), d;
    });
  }
});

// node_modules/dayjs/locale/ko.js
var require_ko = __commonJS({
  "node_modules/dayjs/locale/ko.js"(exports, module) {
    !function(e, _23) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = _23(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], _23) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_ko = _23(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function _23(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var d = _23(e), t2 = { name: "ko", weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"), weekdaysShort: "일_월_화_수_목_금_토".split("_"), weekdaysMin: "일_월_화_수_목_금_토".split("_"), months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), ordinal: function(e2) {
        return e2 + "일";
      }, formats: { LT: "A h:mm", LTS: "A h:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY년 MMMM D일", LLL: "YYYY년 MMMM D일 A h:mm", LLLL: "YYYY년 MMMM D일 dddd A h:mm", l: "YYYY.MM.DD.", ll: "YYYY년 MMMM D일", lll: "YYYY년 MMMM D일 A h:mm", llll: "YYYY년 MMMM D일 dddd A h:mm" }, meridiem: function(e2) {
        return e2 < 12 ? "오전" : "오후";
      }, relativeTime: { future: "%s 후", past: "%s 전", s: "몇 초", m: "1분", mm: "%d분", h: "한 시간", hh: "%d시간", d: "하루", dd: "%d일", M: "한 달", MM: "%d달", y: "일 년", yy: "%d년" } };
      return d.default.locale(t2, null, true), t2;
    });
  }
});

// node_modules/dayjs/locale/nl.js
var require_nl = __commonJS({
  "node_modules/dayjs/locale/nl.js"(exports, module) {
    !function(e, a) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = a(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], a) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_nl = a(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function a(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var d = a(e), n = { name: "nl", weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"), months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), ordinal: function(e2) {
        return "[" + e2 + (1 === e2 || 8 === e2 || e2 >= 20 ? "ste" : "de") + "]";
      }, weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", m: "een minuut", mm: "%d minuten", h: "een uur", hh: "%d uur", d: "een dag", dd: "%d dagen", M: "een maand", MM: "%d maanden", y: "een jaar", yy: "%d jaar" } };
      return d.default.locale(n, null, true), n;
    });
  }
});

// node_modules/dayjs/locale/pt.js
var require_pt = __commonJS({
  "node_modules/dayjs/locale/pt.js"(exports, module) {
    !function(e, a) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = a(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], a) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_pt = a(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function a(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var o = a(e), t2 = { name: "pt", weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"), weekdaysShort: "dom_seg_ter_qua_qui_sex_sab".split("_"), weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sa".split("_"), months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), ordinal: function(e2) {
        return e2 + "º";
      }, weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [às] HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm" }, relativeTime: { future: "em %s", past: "há %s", s: "alguns segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" } };
      return o.default.locale(t2, null, true), t2;
    });
  }
});

// node_modules/dayjs/locale/ru.js
var require_ru = __commonJS({
  "node_modules/dayjs/locale/ru.js"(exports, module) {
    !function(_23, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], t2) : (_23 = "undefined" != typeof globalThis ? globalThis : _23 || self).dayjs_locale_ru = t2(_23.dayjs);
    }(exports, function(_23) {
      "use strict";
      function t2(_24) {
        return _24 && "object" == typeof _24 && "default" in _24 ? _24 : { default: _24 };
      }
      var e = t2(_23), n = "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"), s = "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"), r = "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"), o = "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_"), i = /D[oD]?(\[[^[\]]*\]|\s)+MMMM?/;
      function d(_24, t3, e2) {
        var n2, s2;
        return "m" === e2 ? t3 ? "минута" : "минуту" : _24 + " " + (n2 = +_24, s2 = { mm: t3 ? "минута_минуты_минут" : "минуту_минуты_минут", hh: "час_часа_часов", dd: "день_дня_дней", MM: "месяц_месяца_месяцев", yy: "год_года_лет" }[e2].split("_"), n2 % 10 == 1 && n2 % 100 != 11 ? s2[0] : n2 % 10 >= 2 && n2 % 10 <= 4 && (n2 % 100 < 10 || n2 % 100 >= 20) ? s2[1] : s2[2]);
      }
      var u = function(_24, t3) {
        return i.test(t3) ? n[_24.month()] : s[_24.month()];
      };
      u.s = s, u.f = n;
      var a = function(_24, t3) {
        return i.test(t3) ? r[_24.month()] : o[_24.month()];
      };
      a.s = o, a.f = r;
      var m = { name: "ru", weekdays: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"), weekdaysShort: "вск_пнд_втр_срд_чтв_птн_сбт".split("_"), weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"), months: u, monthsShort: a, weekStart: 1, yearStart: 4, formats: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., H:mm", LLLL: "dddd, D MMMM YYYY г., H:mm" }, relativeTime: { future: "через %s", past: "%s назад", s: "несколько секунд", m: d, mm: d, h: "час", hh: d, d: "день", dd: d, M: "месяц", MM: d, y: "год", yy: d }, ordinal: function(_24) {
        return _24;
      }, meridiem: function(_24) {
        return _24 < 4 ? "ночи" : _24 < 12 ? "утра" : _24 < 17 ? "дня" : "вечера";
      } };
      return e.default.locale(m, null, true), m;
    });
  }
});

// node_modules/dayjs/locale/tr.js
var require_tr = __commonJS({
  "node_modules/dayjs/locale/tr.js"(exports, module) {
    !function(a, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], e) : (a = "undefined" != typeof globalThis ? globalThis : a || self).dayjs_locale_tr = e(a.dayjs);
    }(exports, function(a) {
      "use strict";
      function e(a2) {
        return a2 && "object" == typeof a2 && "default" in a2 ? a2 : { default: a2 };
      }
      var t2 = e(a), _23 = { name: "tr", weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"), weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"), weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"), months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"), monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"), weekStart: 1, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, relativeTime: { future: "%s sonra", past: "%s önce", s: "birkaç saniye", m: "bir dakika", mm: "%d dakika", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir yıl", yy: "%d yıl" }, ordinal: function(a2) {
        return a2 + ".";
      } };
      return t2.default.locale(_23, null, true), _23;
    });
  }
});

// node_modules/dayjs/locale/en.js
var require_en = __commonJS({
  "node_modules/dayjs/locale/en.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define(n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_en = n();
    }(exports, function() {
      "use strict";
      return { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(e) {
        var n = ["th", "st", "nd", "rd"], t2 = e % 100;
        return "[" + e + (n[(t2 - 20) % 10] || n[t2] || n[0]) + "]";
      } };
    });
  }
});

// node_modules/tslib/tslib.es6.mjs
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t2[p] = s[p];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t2 = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _23 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f, y, t2, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_23 = 0)), _23)
      try {
        if (f = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done)
          return t2;
        if (y = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _23.label++;
            return { value: op[1], done: false };
          case 5:
            _23.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _23.ops.pop();
            _23.trys.pop();
            continue;
          default:
            if (!(t2 = _23.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _23 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _23.label = op[1];
              break;
            }
            if (op[0] === 6 && _23.label < t2[1]) {
              _23.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _23.label < t2[2]) {
              _23.label = t2[2];
              _23.ops.push(op);
              break;
            }
            if (t2[2])
              _23.ops.pop();
            _23.trys.pop();
            continue;
        }
        op = body.call(thisArg, _23);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/stream-chat-react/dist/context/ChannelActionContext.js
var import_react = __toESM(require_react());
var ChannelActionContext = import_react.default.createContext(void 0);
var ChannelActionProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react.default.createElement(ChannelActionContext.Provider, { value }, children);
};
var useChannelActionContext = function(componentName) {
  var contextValue = (0, import_react.useContext)(ChannelActionContext);
  if (!contextValue) {
    console.warn("The useChannelActionContext hook was called outside of the ChannelActionContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withChannelActionContext = function(Component) {
  var WithChannelActionContextComponent = function(props) {
    var channelActionContext = useChannelActionContext();
    return import_react.default.createElement(Component, __assign({}, props, channelActionContext));
  };
  WithChannelActionContextComponent.displayName = (Component.displayName || Component.name || "Component").replace("Base", "");
  return WithChannelActionContextComponent;
};

// node_modules/stream-chat-react/dist/context/ChannelListContext.js
var import_react2 = __toESM(require_react());
var ChannelListContext = (0, import_react2.createContext)(void 0);
var ChannelListContextProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react2.default.createElement(ChannelListContext.Provider, { value }, children);
};
var useChannelListContext = function(componentName) {
  var contextValue = (0, import_react2.useContext)(ChannelListContext);
  if (!contextValue) {
    console.warn("The useChannelListContext hook was called outside of the ChannelListContext provider. Make sure this hook is called within the ChannelList component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/ChannelStateContext.js
var import_react3 = __toESM(require_react());
var ChannelStateContext = import_react3.default.createContext(void 0);
var ChannelStateProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react3.default.createElement(ChannelStateContext.Provider, { value }, children);
};
var useChannelStateContext = function(componentName) {
  var contextValue = (0, import_react3.useContext)(ChannelStateContext);
  if (!contextValue) {
    console.warn("The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withChannelStateContext = function(Component) {
  var WithChannelStateContextComponent = function(props) {
    var channelStateContext = useChannelStateContext();
    return import_react3.default.createElement(Component, __assign({}, props, channelStateContext));
  };
  WithChannelStateContextComponent.displayName = (Component.displayName || Component.name || "Component").replace("Base", "");
  return WithChannelStateContextComponent;
};

// node_modules/stream-chat-react/dist/context/ChatContext.js
var import_react4 = __toESM(require_react());

// node_modules/stream-chat-react/dist/context/utils/getDisplayName.js
var getDisplayName = function(Component) {
  return Component.displayName || Component.name || "Component";
};

// node_modules/stream-chat-react/dist/context/ChatContext.js
var ChatContext = import_react4.default.createContext(void 0);
var ChatProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react4.default.createElement(ChatContext.Provider, { value }, children);
};
var useChatContext = function(componentName) {
  var contextValue = (0, import_react4.useContext)(ChatContext);
  if (!contextValue) {
    console.warn("The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withChatContext = function(Component) {
  var WithChatContextComponent = function(props) {
    var chatContext = useChatContext();
    return import_react4.default.createElement(Component, __assign({}, props, chatContext));
  };
  WithChatContextComponent.displayName = "WithChatContext".concat(getDisplayName(Component));
  return WithChatContextComponent;
};

// node_modules/stream-chat-react/dist/context/ComponentContext.js
var import_react5 = __toESM(require_react());
var ComponentContext = import_react5.default.createContext(void 0);
var ComponentProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react5.default.createElement(ComponentContext.Provider, { value }, children);
};
var useComponentContext = function(componentName) {
  var contextValue = (0, import_react5.useContext)(ComponentContext);
  if (!contextValue) {
    console.warn("The useComponentContext hook was called outside of the ComponentContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withComponentContext = function(Component) {
  var WithComponentContextComponent = function(props) {
    var componentContext = useComponentContext();
    return import_react5.default.createElement(Component, __assign({}, props, componentContext));
  };
  WithComponentContextComponent.displayName = (Component.displayName || Component.name || "Component").replace("Base", "");
  return WithComponentContextComponent;
};

// node_modules/stream-chat-react/dist/context/EmojiContext.js
var import_react6 = __toESM(require_react());
var import_nimble_emoji_index = __toESM(require_nimble_emoji_index());
var DefaultEmoji = import_react6.default.lazy(function() {
  return import("./DefaultEmoji-A6LNEWAV.js");
});
var DefaultEmojiPicker = import_react6.default.lazy(function() {
  return import("./DefaultEmojiPicker-TPG72Z6L.js");
});
var EmojiContext = import_react6.default.createContext(void 0);
var EmojiProvider = function(_a) {
  var children = _a.children, value = _a.value;
  var _b = value.Emoji, Emoji = _b === void 0 ? DefaultEmoji : _b, emojiConfig = value.emojiConfig, _c = value.EmojiIndex, EmojiIndex = _c === void 0 ? import_nimble_emoji_index.default : _c, _d = value.EmojiPicker, EmojiPicker = _d === void 0 ? DefaultEmojiPicker : _d;
  var emojiContextValue = {
    Emoji,
    emojiConfig,
    EmojiIndex,
    EmojiPicker
  };
  return import_react6.default.createElement(EmojiContext.Provider, { value: emojiContextValue }, children);
};
var useEmojiContext = function(componentName) {
  var contextValue = (0, import_react6.useContext)(EmojiContext);
  if (!contextValue) {
    console.warn("The useEmojiContext hook was called outside of the EmojiContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withEmojiContext = function(Component) {
  var WithEmojiContextComponent = function(props) {
    var componentContext = useEmojiContext();
    return import_react6.default.createElement(Component, __assign({}, props, componentContext));
  };
  WithEmojiContextComponent.displayName = (Component.displayName || Component.name || "Component").replace("Base", "");
  return WithEmojiContextComponent;
};

// node_modules/stream-chat-react/dist/context/MessageContext.js
var import_react7 = __toESM(require_react());
var MessageContext = import_react7.default.createContext(void 0);
var MessageProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react7.default.createElement(MessageContext.Provider, { value }, children);
};
var useMessageContext = function(componentName) {
  var contextValue = (0, import_react7.useContext)(MessageContext);
  if (!contextValue) {
    console.warn("The useMessageContext hook was called outside of the MessageContext provider. Make sure this hook is called within the Message's UI component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withMessageContext = function(Component) {
  var WithMessageContextComponent = function(props) {
    var messageContext = useMessageContext();
    return import_react7.default.createElement(Component, __assign({}, props, messageContext));
  };
  WithMessageContextComponent.displayName = (Component.displayName || Component.name || "Component").replace("Base", "");
  return WithMessageContextComponent;
};

// node_modules/stream-chat-react/dist/context/MessageInputContext.js
var import_react8 = __toESM(require_react());
var MessageInputContext = (0, import_react8.createContext)(void 0);
var MessageInputContextProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react8.default.createElement(MessageInputContext.Provider, { value }, children);
};
var useMessageInputContext = function(componentName) {
  var contextValue = (0, import_react8.useContext)(MessageInputContext);
  if (!contextValue) {
    console.warn("The useMessageInputContext hook was called outside of the MessageInputContext provider. Make sure this hook is called within the MessageInput's UI component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/MessageListContext.js
var import_react9 = __toESM(require_react());
var MessageListContext = (0, import_react9.createContext)(void 0);
var MessageListContextProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react9.default.createElement(MessageListContext.Provider, { value }, children);
};
var useMessageListContext = function(componentName) {
  var contextValue = (0, import_react9.useContext)(MessageListContext);
  if (!contextValue) {
    console.warn("The useMessageListContext hook was called outside of the MessageListContext provider. Make sure this hook is called within the MessageList component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/TranslationContext.js
var import_react10 = __toESM(require_react());
var import_dayjs2 = __toESM(require_dayjs_min());
var import_calendar2 = __toESM(require_calendar());
var import_localizedFormat2 = __toESM(require_localizedFormat());

// node_modules/stream-chat-react/dist/i18n/de.json
var de_default = {
  "Attach files": "Dateien anhängen",
  Cancel: "Stornieren",
  "Channel Missing": "Kanal fehlt",
  Close: "Schließen",
  "Close emoji picker": "Emoji-Picker schließen",
  "Commands matching": "Übereinstimmende Befehle",
  "Connection failure, reconnecting now...": "Verbindungsfehler, Wiederherstellung der Verbindung...",
  Delete: "Löschen",
  Delivered: "Zugestellt",
  "Drag your files here": "Ziehen Sie Ihre Dateien hierher",
  "Drag your files here to add to your post": "Ziehen Sie Ihre Dateien hierher, um sie Ihrem Beitrag hinzuzufügen",
  "Edit Message": "Nachricht bearbeiten",
  "Edit message request failed": "Anfrage zum Bearbeiten der Nachricht fehlgeschlagen",
  "Emoji matching": "Emoji passend",
  "Empty message...": "Leere Nachricht...",
  "Error adding flag": "Fehler beim Hinzufügen des Flags",
  "Error connecting to chat, refresh the page to try again.": "Verbindungsfehler zum Chat, Aktualisiere die Seite um es erneut zu versuchen.",
  "Error deleting message": "Fehler beim Löschen der Nachricht",
  "Error muting a user ...": "Fehler beim Stummschalten eines Nutzers.",
  "Error pinning message": "Fehler beim Pinnen der Nachricht",
  "Error removing message pin": "Fehler beim Entfernen der gepinnten Nachricht",
  "Error unmuting a user ...": "Stummschaltung des Nutzers fehlgeschlagen ...",
  "Error uploading file": "Fehler beim Hochladen der Datei",
  "Error uploading image": "Hochladen des Bildes fehlgeschlagen",
  "Error · Unsent": "Fehler nicht gesendet",
  "Error: {{ errorMessage }}": "Fehler: {{ errorMessage }}",
  Flag: "Meldung",
  "Latest Messages": "Neueste Nachrichten",
  "Load more": "Mehr laden",
  Menu: "Menü",
  "Message Failed · Click to try again": "Nachricht fehlgeschlagen · Klicken, um es erneut zu versuchen",
  "Message Failed · Unauthorized": "Nachricht fehlgeschlagen · Nicht autorisiert",
  "Message deleted": "Nachricht gelöscht",
  "Message has been successfully flagged": "Nachricht wurde erfolgreich gemeldet",
  "Message pinned": "Nachricht gepinnt",
  Mute: "Stumm schalten",
  New: "Neu",
  "New Messages!": "Neue Nachrichten!",
  "No chats here yet…": "Noch keine Chats hier...",
  "No results found": "keine Ergebnisse gefunden",
  "Nothing yet...": "Noch nichts...",
  "Open emoji picker": "Emoji-Picker öffnen",
  "People matching": "Passende Personen",
  "Pick your emoji": "Emoji wählen",
  Pin: "Pin",
  "Pinned by": "Gepinnt von",
  Reply: "Antworten",
  "Reply to Message": "Auf Nachricht antworten",
  Search: "Suche",
  "Searching...": "Suchen...",
  Send: "Senden",
  "Send message request failed": "Senden der Nachrichtenanfrage fehlgeschlagen",
  "Sending...": "Senden...",
  Shuffle: "Mischen",
  "Slow Mode ON": "Slow-Mode EIN",
  "Some of the files will not be accepted": "Einige der Dateien werden nicht akzeptiert",
  "This message was deleted...": "Diese Nachricht wurde gelöscht...",
  Thread: "Thread",
  "Type your message": "Nachricht eingeben",
  Unmute: "Stummschaltung aufheben",
  Unpin: "Pin entfernen",
  'Upload type: "{{ type }}" is not allowed': 'Upload-Typ: "{{ type }}" ist nicht erlaubt',
  "User uploaded content": "Benutzer hochgeladenen Inhalts",
  "Wait until all attachments have uploaded": "Bitte warten, bis alle Anhänge hochgeladen wurden",
  "You have no channels currently": "Du hast momentan noch keinen Channels",
  "You've reached the maximum number of files": "Die maximale Dateianzahl ist erreicht",
  "ban-command-args": "[@Benutzername] [Text]",
  "ban-command-description": "Einen Benutzer verbannen",
  "giphy-command-args": "[Text]",
  "giphy-command-description": "Poste ein zufälliges Gif in den Kanal",
  live: "live",
  "mute-command-args": "[@Benutzername]",
  "mute-command-description": "Stummschalten eines Benutzers",
  replyCount_one: "1 Antwort",
  replyCount_other: "{{ count }} Antworten",
  searchResultsCount_one: "1 Ergebnis",
  searchResultsCount_other: "{{ count }} Ergebnisse",
  "this content could not be displayed": "Dieser Inhalt konnte nicht angezeigt werden",
  "unban-command-args": "[@Benutzername]",
  "unban-command-description": "Einen Benutzer entbannen",
  "unmute-command-args": "[@Benutzername]",
  "unmute-command-description": "Stummschaltung eines Benutzers aufheben",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} und {{moreCount}} Mehr",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} und {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} und {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} mehr",
  "{{ memberCount }} members": "{{ memberCount }} Mitglieder",
  "{{ user }} has been muted": "{{ user }} wurde stummgeschaltet",
  "{{ user }} has been unmuted": "{{ user }} wurde nicht stummgeschaltet",
  "{{ user }} is typing...": "{{ user }} tippt...",
  "{{ users }} and more are typing...": "{{ users }} und mehr tippen...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} und {{ user }} tippen...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "🏙 Attachment...": "🏙 Anhang..."
};

// node_modules/stream-chat-react/dist/i18n/en.json
var en_default = {
  "Attach files": "Attach files",
  Cancel: "Cancel",
  "Channel Missing": "Channel Missing",
  Close: "Close",
  "Close emoji picker": "Close emoji picker",
  "Commands matching": "Commands matching",
  "Connection failure, reconnecting now...": "Connection failure, reconnecting now...",
  Delete: "Delete",
  Delivered: "Delivered",
  "Drag your files here": "Drag your files here",
  "Drag your files here to add to your post": "Drag your files here to add to your post",
  "Edit Message": "Edit Message",
  "Edit message request failed": "Edit message request failed",
  "Emoji matching": "Emoji matching",
  "Empty message...": "Empty message...",
  "Error adding flag": "Error adding flag",
  "Error connecting to chat, refresh the page to try again.": "Error connecting to chat, refresh the page to try again.",
  "Error deleting message": "Error deleting message",
  "Error muting a user ...": "Error muting a user ...",
  "Error pinning message": "Error pinning message",
  "Error removing message pin": "Error removing message pin",
  "Error unmuting a user ...": "Error unmuting a user ...",
  "Error uploading file": "Error uploading file",
  "Error uploading image": "Error uploading image",
  "Error · Unsent": "Error · Unsent",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  Flag: "Flag",
  "Latest Messages": "Latest Messages",
  "Load more": "Load more",
  Menu: "Menu",
  "Message Failed · Click to try again": "Message Failed · Click to try again",
  "Message Failed · Unauthorized": "Message Failed · Unauthorized",
  "Message deleted": "Message deleted",
  "Message has been successfully flagged": "Message has been successfully flagged",
  "Message pinned": "Message pinned",
  Mute: "Mute",
  New: "New",
  "New Messages!": "New Messages!",
  "No chats here yet…": "No chats here yet…",
  "No results found": "No results found",
  "Nothing yet...": "Nothing yet...",
  "Open emoji picker": "Open emoji picker",
  "People matching": "People matching",
  "Pick your emoji": "Pick your emoji",
  Pin: "Pin",
  "Pinned by": "Pinned by",
  Reply: "Reply",
  "Reply to Message": "Reply to Message",
  Search: "Search",
  "Searching...": "Searching...",
  Send: "Send",
  "Send message request failed": "Send message request failed",
  "Sending...": "Sending...",
  Shuffle: "Shuffle",
  "Slow Mode ON": "Slow Mode ON",
  "Some of the files will not be accepted": "Some of the files will not be accepted",
  "This message was deleted...": "This message was deleted...",
  Thread: "Thread",
  "Type your message": "Type your message",
  Unmute: "Unmute",
  Unpin: "Unpin",
  'Upload type: "{{ type }}" is not allowed': 'Upload type: "{{ type }}" is not allowed',
  "User uploaded content": "User uploaded content",
  "Wait until all attachments have uploaded": "Wait until all attachments have uploaded",
  "You have no channels currently": "You have no channels currently",
  "You've reached the maximum number of files": "You've reached the maximum number of files",
  live: "live",
  replyCount_one: "1 reply",
  replyCount_other: "{{ count }} replies",
  searchResultsCount_one: "1 result",
  searchResultsCount_other: "{{ count }} results",
  "this content could not be displayed": "this content could not be displayed",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} and {{ moreCount }} more",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }}, and {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} and {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} more",
  "{{ memberCount }} members": "{{ memberCount }} members",
  "{{ user }} has been muted": "{{ user }} has been muted",
  "{{ user }} has been unmuted": "{{ user }} has been unmuted",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "🏙 Attachment...": "🏙 Attachment..."
};

// node_modules/stream-chat-react/dist/i18n/es.json
var es_default = {
  "Attach files": "Adjuntar archivos",
  Cancel: "Cancelar",
  "Channel Missing": "Falta canal",
  Close: "Cerca",
  "Close emoji picker": "Cerrar el selector de emojis",
  "Commands matching": "Coincidencia de comandos",
  "Connection failure, reconnecting now...": "Fallo de conexión, reconectando ahora ...",
  Delete: "Borrar",
  Delivered: "Entregado",
  "Drag your files here": "Arrastra tus archivos aquí",
  "Drag your files here to add to your post": "Arrastra tus archivos aquí para agregarlos a tu publicación",
  "Edit Message": "Editar mensaje",
  "Edit message request failed": "Error al editar la solicitud de mensaje",
  "Emoji matching": "Coincidencia de emoji",
  "Empty message...": "Mensaje vacío ...",
  "Error adding flag": "Error al agregar la bandera",
  "Error connecting to chat, refresh the page to try again.": "Error al conectarse al chat, actualice la página para volver a intentarlo.",
  "Error deleting message": "Error al eliminar el mensaje",
  "Error muting a user ...": "Error al silenciar a un usuario ...",
  "Error pinning message": "Mensaje de error al fijar",
  "Error removing message pin": "Error al quitar el pin del mensaje",
  "Error unmuting a user ...": "Error al activar el silencio de un usuario ...",
  "Error uploading file": "Error al cargar el archivo",
  "Error uploading image": "Error subiendo imagen",
  "Error · Unsent": "Error · No enviado",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  Flag: "Bandera",
  "Latest Messages": "Últimos mensajes",
  "Load more": "Cargar más",
  Menu: "Menú",
  "Message Failed · Click to try again": "Mensaje fallido · Haga clic para volver a intentarlo",
  "Message Failed · Unauthorized": "Mensaje fallido · No autorizado",
  "Message deleted": "Mensaje borrado",
  "Message has been successfully flagged": "El mensaje se marcó correctamente",
  "Message pinned": "Mensaje fijado",
  Mute: "Mudo",
  New: "Nuevo",
  "New Messages!": "¡Nuevos mensajes!",
  "No chats here yet…": "Aún no hay mensajes aquí...",
  "No results found": "No se han encontrado resultados",
  "Nothing yet...": "Nada aún...",
  "Open emoji picker": "Selector de emoji abierto",
  "People matching": "Personas que coinciden",
  "Pick your emoji": "Elige tu emoji",
  Pin: "Alfiler",
  "Pinned by": "Fijado por",
  Reply: "Respuesta",
  "Reply to Message": "Responder al mensaje",
  Search: "Buscar",
  "Searching...": "Buscando...",
  Send: "Enviar",
  "Send message request failed": "Error al enviar la solicitud de mensaje",
  "Sending...": "Enviando...",
  Shuffle: "Mezclar",
  "Slow Mode ON": "Modo lento activado",
  "Some of the files will not be accepted": "Algunos de los archivos no serán aceptados",
  "This message was deleted...": "Este mensaje fue eliminado ...",
  Thread: "Hilo",
  "Type your message": "Escribe tu mensaje",
  Unmute: "Activar sonido",
  Unpin: "Desprender",
  'Upload type: "{{ type }}" is not allowed': 'Tipo de carga: "{{ type }}" no está permitido',
  "User uploaded content": "Contenido subido por el usuario",
  "Wait until all attachments have uploaded": "Espere hasta que se hayan cargado todos los archivos adjuntos",
  "You have no channels currently": "Actualmente no tienes canales",
  "You've reached the maximum number of files": "Has alcanzado el número máximo de archivos",
  "ban-command-args": "[@usuario] [texto]",
  "ban-command-description": "Prohibir a un usuario",
  "giphy-command-args": "[texto]",
  "giphy-command-description": "Publicar un gif aleatorio en el canal",
  live: "En Vivo",
  "mute-command-args": "[@usuario]",
  "mute-command-description": "Silenciar a un usuario",
  replyCount_many: "{{ count }} respuestas",
  replyCount_one: "1 respuesta",
  replyCount_other: "{{ count }} respuestas",
  searchResultsCount_many: "{{ count }} resultados",
  searchResultsCount_one: "1 resultado",
  searchResultsCount_other: "{{ count }} resultados",
  "this content could not be displayed": "este contenido no se pudo mostrar",
  "unban-command-args": "[@usuario]",
  "unban-command-description": "Quitar la prohibición a un usuario",
  "unmute-command-args": "[@usuario]",
  "unmute-command-description": "Anular el silencio de un usuario",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} y {{ moreCount }} más",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} y {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} y {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} más",
  "{{ memberCount }} members": "{{ memberCount }} miembros",
  "{{ user }} has been muted": "{{ user }} ha sido silenciado",
  "{{ user }} has been unmuted": "{{ user }} se ha desactivado",
  "{{ user }} is typing...": "{{ user }} está escribiendo...",
  "{{ users }} and more are typing...": "{{ users }} y más están escribiendo...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} y {{ user }} están escribiendo...",
  "{{ watcherCount }} online": "{{ watcherCount }} en línea",
  "🏙 Attachment...": "🏙 Adjunto..."
};

// node_modules/stream-chat-react/dist/i18n/fr.json
var fr_default = {
  "Attach files": "Pièces jointes",
  Cancel: "Annuler",
  "Channel Missing": "Canal Manquant",
  Close: "Fermer",
  "Close emoji picker": "Fermer le sélecteur d'emojis",
  "Commands matching": "Correspondance des commandes",
  "Connection failure, reconnecting now...": "Échec de la connexion, reconnexion en cours...",
  Delete: "Supprimer",
  Delivered: "Publié",
  "Drag your files here": "Glissez vos fichiers ici",
  "Drag your files here to add to your post": "Glissez vos fichiers ici pour les ajouter à votre publication",
  "Edit Message": "Éditer un message",
  "Edit message request failed": "Échec de la demande de modification du message",
  "Emoji matching": "Correspondance emoji",
  "Empty message...": "Message vide...",
  "Error adding flag": "Erreur lors de l'ajout du drapeau",
  "Error connecting to chat, refresh the page to try again.": "Erreur de connexion au chat, rafraîchissez la page pour réessayer.",
  "Error deleting message": "Erreur lors de la suppression du message",
  "Error muting a user ...": "Erreur de mise en sourdine d'un utilisateur ...",
  "Error pinning message": "Erreur d'épinglage du message",
  "Error removing message pin": "Erreur lors de la suppression du code PIN du message",
  "Error unmuting a user ...": "Erreur de désactivation de la fonction sourdine pour un utilisateur ...",
  "Error uploading file": "Erreur lors du téléchargement du fichier",
  "Error uploading image": "Erreur lors de l'envoi de l'image",
  "Error · Unsent": "Erreur - Non envoyé",
  "Error: {{ errorMessage }}": "Erreur : {{ errorMessage }}",
  Flag: "Signaler",
  "Latest Messages": "Derniers messages",
  "Load more": "Charger plus",
  Menu: "Menu",
  "Message Failed · Click to try again": "Échec de l'envoi du message - Cliquez pour réessayer",
  "Message Failed · Unauthorized": "Échec de l'envoi du message - Non autorisé",
  "Message deleted": "Message supprimé",
  "Message has been successfully flagged": "Le message a été signalé avec succès",
  "Message pinned": "Message épinglé",
  Mute: "Muet",
  New: "Nouveaux",
  "New Messages!": "Nouveaux Messages!",
  "No chats here yet…": "Pas encore de messages ici...",
  "No results found": "Aucun résultat trouvé",
  "Nothing yet...": "Aucun message...",
  "Open emoji picker": "Ouvrez le sélecteur d'emoji",
  "People matching": "Correspondance de personnes",
  "Pick your emoji": "Choisissez votre emoji",
  Pin: "Épingle",
  "Pinned by": "Épinglé par",
  Reply: "Réponse",
  "Reply to Message": "Répondre au message",
  Search: "Rechercher",
  "Searching...": "Recherche...",
  Send: "Envoyer",
  "Send message request failed": "Échec de la demande d'envoi de message",
  "Sending...": "Envoi en cours...",
  Shuffle: "Mélanger",
  "Slow Mode ON": "Mode lent activé",
  "Some of the files will not be accepted": "Certains fichiers ne seront pas acceptés",
  "This message was deleted...": "Ce message a été supprimé...",
  Thread: "Fil de discussion",
  "Type your message": "Saisissez votre message",
  Unmute: "Désactiver muet",
  Unpin: "Détacher",
  'Upload type: "{{ type }}" is not allowed': `Le type de téléchargement: "{{ type }}" n'est pas autorisé`,
  "User uploaded content": "Contenu téléchargé par l'utilisateur",
  "Wait until all attachments have uploaded": "Attendez que toutes les pièces jointes soient téléchargées",
  "You have no channels currently": "Vous n'avez actuellement aucun canal",
  "You've reached the maximum number of files": "Vous avez atteint le nombre maximum de fichiers",
  "ban-command-args": "[@nomdutilisateur] [texte]",
  "ban-command-description": "Bannir un utilisateur",
  "giphy-command-args": "[texte]",
  "giphy-command-description": "Poster un GIF aléatoire dans le canal",
  live: "en direct",
  "mute-command-args": "[@nomdutilisateur]",
  "mute-command-description": "Muter un utilisateur",
  replyCount_many: "{{ count }} réponses",
  replyCount_one: "1 réponse",
  replyCount_other: "{{ count }} réponses",
  searchResultsCount_many: "{{ count }} résultats",
  searchResultsCount_one: "1 résultat",
  searchResultsCount_other: "{{ count }} résultats",
  "this content could not be displayed": "ce contenu n'a pu être affiché",
  "unban-command-args": "[@nomdutilisateur]",
  "unban-command-description": "Débannir un utilisateur",
  "unmute-command-args": "[@nomdutilisateur]",
  "unmute-command-description": "Démuter un utilisateur",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} et {{ moreCount }} autres",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} et {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} et {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} supplémentaires",
  "{{ memberCount }} members": "{{ memberCount }} membres",
  "{{ user }} has been muted": "{{ user }} a été mis en sourdine",
  "{{ user }} has been unmuted": "{{ user }} n'est plus en sourdine",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} en ligne",
  "🏙 Attachment...": "🏙 Pièce jointe..."
};

// node_modules/stream-chat-react/dist/i18n/hi.json
var hi_default = {
  "Attach files": "फाइल्स अटैच करे",
  Cancel: "रद्द करें",
  "Channel Missing": "चैनल उपलब्ध नहीं है",
  Close: "बंद करे",
  "Close emoji picker": "इमोजी पिकर बंद करें",
  "Commands matching": "मेल खाती है",
  "Connection failure, reconnecting now...": "कनेक्शन विफल रहा, अब पुनः कनेक्ट हो रहा है ...",
  Delete: "डिलीट",
  Delivered: "पहुंच गया",
  "Drag your files here": "अपनी फ़ाइलें यहाँ खींचें",
  "Drag your files here to add to your post": "अपनी फ़ाइलें यहाँ खींचें और अपने पोस्ट में जोड़ने के लिए",
  "Edit Message": "मैसेज में बदलाव करे",
  "Edit message request failed": "संदेश संपादित करने का अनुरोध विफल रहा",
  "Emoji matching": "इमोजी मिलान",
  "Empty message...": "खाली संदेश ...",
  "Error adding flag": "ध्वज जोड़ने में त्रुटि",
  "Error connecting to chat, refresh the page to try again.": "चैट से कनेक्ट करने में त्रुटि, पेज को रिफ्रेश करें",
  "Error deleting message": "संदेश हटाने में त्रुटि",
  "Error muting a user ...": "यूजर को म्यूट करने का प्रयास फेल हुआ",
  "Error pinning message": "संदेश को पिन करने में त्रुटि",
  "Error removing message pin": "संदेश पिन निकालने में त्रुटि",
  "Error unmuting a user ...": "यूजर को अनम्यूट करने का प्रयास फेल हुआ",
  "Error uploading file": "फ़ाइल अपलोड करने में त्रुटि",
  "Error uploading image": "छवि अपलोड करने में त्रुटि",
  "Error · Unsent": "फेल",
  "Error: {{ errorMessage }}": "फेल: {{ errorMessage }}",
  Flag: "फ्लैग करे",
  "Latest Messages": "नवीनतम संदेश",
  "Load more": "और लोड करें",
  Menu: "मेन्यू",
  "Message Failed · Click to try again": "मैसेज फ़ैल - पुनः कोशिश करें",
  "Message Failed · Unauthorized": "मैसेज फ़ैल - अनधिकृत",
  "Message deleted": "मैसेज हटा दिया गया",
  "Message has been successfully flagged": "मैसेज को फ्लैग कर दिया गया है",
  "Message pinned": "संदेश पिन किया गया",
  Mute: "म्यूट करे",
  New: "नए",
  "New Messages!": "नए मैसेज!",
  "No chats here yet…": "यहां अभी तक कोई चैट नहीं...",
  "No results found": "कोई परिणाम नहीं मिला",
  "Nothing yet...": "कोई मैसेज नहीं है",
  "Open emoji picker": "इमोजी पिकर खोलिये",
  "People matching": "मेल खाते लोग",
  "Pick your emoji": "इमोजी चूस करे",
  Pin: "पिन",
  "Pinned by": "द्वारा पिन किया गया",
  Reply: "जवाब दे दो",
  "Reply to Message": "संदेश का जवाब दें",
  Search: "खोज",
  "Searching...": "खोज कर...",
  Send: "भेजे",
  "Send message request failed": "संदेश भेजने का अनुरोध विफल रहा",
  "Sending...": "भेजा जा रहा है",
  Shuffle: "मिश्रित करें",
  "Slow Mode ON": "स्लो मोड ऑन",
  "Some of the files will not be accepted": "कुछ फ़ाइलें स्वीकार नहीं की जाएंगी",
  "This message was deleted...": "मैसेज हटा दिया गया",
  Thread: "रिप्लाई थ्रेड",
  "Type your message": "अपना मैसेज लिखे",
  Unmute: "अनम्यूट",
  Unpin: "अनपिन",
  'Upload type: "{{ type }}" is not allowed': 'अपलोड प्रकार: "{{ type }}" की अनुमति नहीं है',
  "User uploaded content": "उपयोगकर्ता अपलोड की गई सामग्री",
  "Wait until all attachments have uploaded": "सभी अटैचमेंट अपलोड होने तक प्रतीक्षा करें",
  "You have no channels currently": "आपके पास कोई चैनल नहीं है",
  "You've reached the maximum number of files": "आप अधिकतम फ़ाइलों तक पहुँच गए हैं",
  "ban-command-args": "[@उपयोगकर्तनाम] [पाठ]",
  "ban-command-description": "एक उपयोगकर्ता को प्रतिषेधित करें",
  "giphy-command-args": "[पाठ]",
  "giphy-command-description": "चैनल पर एक क्रॉफिल जीआइएफ पोस्ट करें",
  live: "लाइव",
  "mute-command-args": "[@उपयोगकर्तनाम]",
  "mute-command-description": "एक उपयोगकर्ता को म्यूट करें",
  replyCount_one: "1 रिप्लाई",
  replyCount_other: "{{ count }} रिप्लाई",
  searchResultsCount_one: "1 परिणाम",
  searchResultsCount_other: "{{ count }} परिणाम",
  "this content could not be displayed": "यह कॉन्टेंट लोड नहीं हो पाया",
  "unban-command-args": "[@उपयोगकर्तनाम]",
  "unban-command-description": "एक उपयोगकर्ता को प्रतिषेध से मुक्त करें",
  "unmute-command-args": "[@उपयोगकर्तनाम]",
  "unmute-command-description": "एक उपयोगकर्ता को अनम्यूट करें",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} और {{ moreCount }} और",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} और {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} और {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} और",
  "{{ memberCount }} members": "{{ memberCount }} मेंबर्स",
  "{{ user }} has been muted": "{{ user }} को म्यूट कर दिया गया है",
  "{{ user }} has been unmuted": "{{ user }} को अनम्यूट कर दिया गया है",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "🏙 Attachment...": "🏙 अटैचमेंट"
};

// node_modules/stream-chat-react/dist/i18n/it.json
var it_default = {
  "Attach files": "Allega file",
  Cancel: "Annulla",
  "Channel Missing": "Il canale non esiste",
  Close: "Chiudi",
  "Close emoji picker": "Chiudi il selettore di emoji",
  "Commands matching": "Comandi corrispondenti",
  "Connection failure, reconnecting now...": "Connessione fallitta, riconnessione in corso...",
  Delete: "Cancella",
  Delivered: "Consegnato",
  "Drag your files here": "Trascina i tuoi file qui",
  "Drag your files here to add to your post": "Trascina i tuoi file qui per aggiungerli al tuo post",
  "Edit Message": "Modifica messaggio",
  "Edit message request failed": "Richiesta di modifica del messaggio non riuscita",
  "Emoji matching": "Abbinamento emoji",
  "Empty message...": "Message vuoto...",
  "Error adding flag": "Errore durante l'aggiunta del flag",
  "Error connecting to chat, refresh the page to try again.": "Errore di connessione alla chat, aggiorna la pagina per riprovare",
  "Error deleting message": "Errore durante l'eliminazione del messaggio",
  "Error muting a user ...": "Errore silenziando un utente ...",
  "Error pinning message": "Errore durante il blocco del messaggio",
  "Error removing message pin": "Errore durante la rimozione del PIN del messaggio",
  "Error unmuting a user ...": "Errore riattivando le notifiche per l'utente ...",
  "Error uploading file": "Errore durante il caricamento del file",
  "Error uploading image": "Errore durante il caricamento dell'immagine",
  "Error · Unsent": "Errore · Non inviato",
  "Error: {{ errorMessage }}": "Errore: {{ errorMessage }}",
  Flag: "Segnala",
  "Latest Messages": "Ultimi messaggi",
  "Load more": "Carica di più",
  Menu: "Menù",
  "Message Failed · Click to try again": "Invio messaggio fallito · Clicca per riprovare",
  "Message Failed · Unauthorized": "Invio messaggio fallito · Non autorizzato",
  "Message deleted": "Messaggio cancellato",
  "Message has been successfully flagged": "Il messaggio é stato segnalato con successo",
  "Message pinned": "Messaggio bloccato",
  Mute: "Silenzia",
  New: "Nuovo",
  "New Messages!": "Nuovo messaggio!",
  "No chats here yet…": "Non ci sono ancora messaggi qui...",
  "No results found": "Nessun risultato trovato",
  "Nothing yet...": "Ancora niente...",
  "Open emoji picker": "Apri il selettore dellle emoji",
  "People matching": "Persone che corrispondono",
  "Pick your emoji": "Scegli la tua emoji",
  Pin: "Pin",
  "Pinned by": "Appuntato da",
  Reply: "Rispondere",
  "Reply to Message": "Rispondi al messaggio",
  Search: "Ricerca",
  "Searching...": "Ricerca in corso ...",
  Send: "Invia",
  "Send message request failed": "Invia messaggio di richiesta non riuscito",
  "Sending...": "Invio in corso...",
  Shuffle: "Mescolare",
  "Slow Mode ON": "Modalità lenta attivata",
  "Some of the files will not be accepted": "Alcuni dei file non saranno accettati",
  "This message was deleted...": "Questo messaggio é stato cancellato",
  Thread: "Thread",
  "Type your message": "Scrivi il tuo messaggio",
  Unmute: "Riattiva le notifiche",
  Unpin: "Sblocca",
  'Upload type: "{{ type }}" is not allowed': 'Tipo di caricamento: "{{ type }}" non è consentito',
  "User uploaded content": "Contenuto caricato dall'utente",
  "Wait until all attachments have uploaded": "Attendi il caricamento di tutti gli allegati",
  "You have no channels currently": "Al momento non sono presenti canali",
  "You've reached the maximum number of files": "Hai raggiunto il numero massimo di file",
  "ban-command-args": "[@nomeutente] [testo]",
  "ban-command-description": "Vietare un utente",
  "giphy-command-args": "[testo]",
  "giphy-command-description": "Pubblica un gif casuale sul canale",
  live: "live",
  "mute-command-args": "[@nomeutente]",
  "mute-command-description": "Silenzia un utente",
  replyCount_many: "{{ count }} risposte",
  replyCount_one: "Una risposta",
  replyCount_other: "{{ count }} risposte",
  searchResultsCount_many: "{{ count }} risultati",
  searchResultsCount_one: "1 risultato",
  searchResultsCount_other: "{{ count }} risultati",
  "this content could not be displayed": "questo contenuto non puó essere mostrato",
  "unban-command-args": "[@nomeutente]",
  "unban-command-description": "Togliere il divieto a un utente",
  "unmute-command-args": "[@nomeutente]",
  "unmute-command-description": "Togliere il silenzio a un utente",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} e altri {{ moreCount }}",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} e {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} e {{ secondUser }}",
  "{{ imageCount }} more": "+ {{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} membri",
  "{{ user }} has been muted": "{{ user }} é stato silenziato",
  "{{ user }} has been unmuted": "Notifiche riattivate per {{ user }}",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "🏙 Attachment...": "🏙 Allegato..."
};

// node_modules/stream-chat-react/dist/i18n/ja.json
var ja_default = {
  "Attach files": "ファイルを添付する",
  Cancel: "キャンセル",
  "Channel Missing": "チャネルがありません",
  Close: "閉める",
  "Close emoji picker": "絵文字ピッカーを閉める",
  "Commands matching": "一致するコマンド",
  "Connection failure, reconnecting now...": "接続が失敗しました。再接続中...",
  Delete: "消去",
  Delivered: "配信しました",
  "Drag your files here": "ここにファイルをドラッグ",
  "Drag your files here to add to your post": "投稿に追加するためにここにファイルをドラッグ",
  "Edit Message": "メッセージを編集",
  "Edit message request failed": "メッセージの編集要求が失敗しました",
  "Emoji matching": "絵文字マッチング",
  "Empty message...": "空のメッセージ...",
  "Error adding flag": "フラグを追加のエラーが発生しました",
  "Error connecting to chat, refresh the page to try again.": "チャットへの接続ができませんでした。ページを更新してください。",
  "Error deleting message": "メッセージを削除するエラーが発生しました",
  "Error muting a user ...": "ユーザーを無音するエラーが発生しました...",
  "Error pinning message": "メッセージをピンのエラーが発生しました",
  "Error removing message pin": "メッセージのピンを削除のエラーが発生しました",
  "Error unmuting a user ...": "ユーザーの無音解除のエラーが発生しました...",
  "Error uploading file": "ファイルをアップロードのエラーが発生しました",
  "Error uploading image": "画像をアップロードのエラーが発生しました",
  "Error · Unsent": "エラー・未送信",
  "Error: {{ errorMessage }}": "エラー: {{ errorMessage }}",
  Flag: "フラグ",
  "Latest Messages": "最新のメッセージ",
  "Load more": "もっと読み込む",
  Menu: "メニュー",
  "Message Failed · Click to try again": "メッセージが失敗しました · クリックして再試行してください",
  "Message Failed · Unauthorized": "メッセージが失敗しました · 許可されていません",
  "Message deleted": "メッセージが削除されました",
  "Message has been successfully flagged": "メッセージに正常にフラグが付けられました",
  "Message pinned": "メッセージにピンが付けられました",
  Mute: "無音",
  New: "新しい",
  "New Messages!": "新しいメッセージ!",
  "No chats here yet…": "ここにはまだチャットはありません…",
  "No results found": "結果が見つかりません",
  "Nothing yet...": "まだ何もありません...",
  "Open emoji picker": "絵文字ピッカーを開く",
  "People matching": "一致する人",
  "Pick your emoji": "絵文字を選んでください",
  Pin: "ピン",
  "Pinned by": "ピンした方",
  Reply: "返事",
  "Reply to Message": "メッセージに返信",
  Search: "探す",
  "Searching...": "検索中...",
  Send: "送信",
  "Send message request failed": "メッセージ送信リクエストが失敗しました",
  "Sending...": "送信中...",
  Shuffle: "シャッフル",
  "Slow Mode ON": "スローモードオン",
  "Some of the files will not be accepted": "一部のファイルは受け付けられません",
  "This message was deleted...": "このメッセージは削除されました...",
  Thread: "スレッド",
  "Type your message": "メッセージを入力してください",
  Unmute: "無音を解除する",
  Unpin: "ピンを解除する",
  'Upload type: "{{ type }}" is not allowed': 'アップロードタイプ："{{ type }}"は許可されていません',
  "User uploaded content": "ユーザーがアップロードしたコンテンツ",
  "Wait until all attachments have uploaded": "すべての添付ファイルがアップロードされるまでお待ちください",
  "You have no channels currently": "現在チャンネルはありません",
  "You've reached the maximum number of files": "ファイルの最大数に達しました",
  "ban-command-args": "[@ユーザ名] [テキスト]",
  "ban-command-description": "ユーザーを禁止する",
  "giphy-command-args": "[テキスト]",
  "giphy-command-description": "チャンネルにランダムなGIFを投稿する",
  live: "ライブ",
  "mute-command-args": "[@ユーザ名]",
  "mute-command-description": "ユーザーをミュートする",
  replyCount_one: "1件の返信",
  replyCount_other: "{{ count }} 返信",
  searchResultsCount_one: "1件の結果",
  searchResultsCount_other: "{{ count }}件の結果",
  "this content could not be displayed": "このコンテンツは表示できませんでした",
  "unban-command-args": "[@ユーザ名]",
  "unban-command-description": "ユーザーの禁止を解除する",
  "unmute-command-args": "[@ユーザ名]",
  "unmute-command-description": "ユーザーのミュートを解除する",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} と {{ moreCount }} 他人",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} と {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} と {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} イメージ",
  "{{ memberCount }} members": "{{ memberCount }} メンバー",
  "{{ user }} has been muted": "{{ user }} 無音されています",
  "{{ user }} has been unmuted": "{{ user }} 無音されていません",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} オンライン",
  "🏙 Attachment...": "🏙 アタッチメント..."
};

// node_modules/stream-chat-react/dist/i18n/ko.json
var ko_default = {
  "Attach files": "파일 첨부",
  Cancel: "취소",
  "Channel Missing": "채널 누락",
  Close: "닫기",
  "Close emoji picker": "이모티콘 선택기 닫기",
  "Commands matching": "일치하는 명령",
  "Connection failure, reconnecting now...": "연결 실패, 지금 다시 연결 중...",
  Delete: "삭제",
  Delivered: "배달됨",
  "Drag your files here": "여기로 파일을 끌어다 놓으세요",
  "Drag your files here to add to your post": "게시물에 추가하려면 파일을 여기로 끌어다 놓으세요",
  "Edit Message": "메시지 수정",
  "Edit message request failed": "메시지 수정 요청 실패",
  "Emoji matching": "이모티콘 매칭",
  "Empty message...": "빈 메시지...",
  "Error adding flag": "플래그를 추가하는 동안 오류가 발생했습니다.",
  "Error connecting to chat, refresh the page to try again.": "채팅에 연결하는 동안 오류가 발생했습니다. 페이지를 새로고침하여 다시 시도하세요.",
  "Error deleting message": "메시지를 삭제하는 중에 오류가 발생했습니다.",
  "Error muting a user ...": "사용자를 음소거하는 중에 오류가 발생했습니다...",
  "Error pinning message": "메시지를 핀하는 중에 오류가 발생했습니다.",
  "Error removing message pin": "메시지 핀을 제거하는 중에 오류가 발생했습니다.",
  "Error unmuting a user ...": "사용자 음소거 해제 중 오류 발생...",
  "Error uploading file": "파일 업로드 오류",
  "Error uploading image": "이미지를 업로드하는 동안 오류가 발생했습니다.",
  "Error · Unsent": "오류 · 전송되지 않음",
  "Error: {{ errorMessage }}": "오류: {{ errorMessage }}",
  Flag: "플래그",
  "Latest Messages": "최신 메시지",
  "Load more": "더 불러오기",
  Menu: "메뉴",
  "Message Failed · Click to try again": "메시지 실패 · 다시 시도하려면 클릭하세요.",
  "Message Failed · Unauthorized": "메시지 실패 · 승인되지 않음",
  "Message deleted": "메시지가 삭제되었습니다.",
  "Message has been successfully flagged": "메시지에 플래그가 지정되었습니다.",
  "Message pinned": "메시지 핀했습니다",
  Mute: "무음",
  New: "새로운",
  "New Messages!": "새 메시지!",
  "No chats here yet…": "아직 채팅이 없습니다...",
  "No results found": "검색 결과가 없습니다",
  "Nothing yet...": "아직 아무것도...",
  "Open emoji picker": "이모티콘 선택기 열기",
  "People matching": "일치하는 사람",
  "Pick your emoji": "이모티콘 선택",
  Pin: "핀",
  "Pinned by": "핀했던 분:",
  Reply: "답장",
  "Reply to Message": "메시지에 답장",
  Search: "찾다",
  "Searching...": "수색...",
  Send: "보내다",
  "Send message request failed": "메시지 보내기 요청 실패",
  "Sending...": "배상중...",
  Shuffle: "셔플",
  "Slow Mode ON": "슬로우 모드 켜짐",
  "Some of the files will not be accepted": "일부 파일은 허용되지 않을 수 있습니다",
  "This message was deleted...": "이 메시지는 삭제되었습니다...",
  Thread: "스레드",
  "Type your message": "메시지 입력",
  Unmute: "음소거 해제",
  Unpin: "핀 해제",
  'Upload type: "{{ type }}" is not allowed': '업로드 유형: "{{ type }}"은(는) 허용되지 않습니다.',
  "User uploaded content": "사용자 업로드 콘텐츠",
  "Wait until all attachments have uploaded": "모든 첨부 파일이 업로드될 때까지 기다립니다.",
  "You have no channels currently": "현재 채널이 없습니다.",
  "You've reached the maximum number of files": "최대 파일 수에 도달했습니다.",
  "ban-command-args": "[@사용자이름] [텍스트]",
  "ban-command-description": "사용자를 차단",
  "giphy-command-args": "[텍스트]",
  "giphy-command-description": "채널에 무작위 GIF 게시",
  live: "라이브",
  "mute-command-args": "[@사용자이름]",
  "mute-command-description": "사용자 음소거",
  replyCount_one: "답장 1개",
  replyCount_other: "{{ count }} 답장",
  searchResultsCount_one: "1개의 결과",
  searchResultsCount_other: "{{ count }}개 결과",
  "this content could not be displayed": "이 콘텐츠를 표시할 수 없습니다",
  "unban-command-args": "[@사용자이름]",
  "unban-command-description": "사용자 차단 해제",
  "unmute-command-args": "[@사용자이름]",
  "unmute-command-description": "사용자 음소거 해제",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} 그리고 {{ moreCount }}명 더",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} 그리고 {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} 그리고 {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }}개 더",
  "{{ memberCount }} members": "{{ memberCount }}명",
  "{{ user }} has been muted": "{{ user }} 음소거되었습니다",
  "{{ user }} has been unmuted": "{{ user }} 음소거가 해제되었습니다",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} 온라인",
  "🏙 Attachment...": "🏙 부착..."
};

// node_modules/stream-chat-react/dist/i18n/nl.json
var nl_default = {
  "Attach files": "Bijlage toevoegen",
  Cancel: "Annuleer",
  "Channel Missing": "Kanaal niet gevonden",
  Close: "Sluit",
  "Close emoji picker": "Sluit de emoji-kiezer",
  "Commands matching": "Bijpassende opdrachten",
  "Connection failure, reconnecting now...": "Probleem met de verbinding, opnieuw verbinding maken...",
  Delete: "Verwijder",
  Delivered: "Afgeleverd",
  "Drag your files here": "Sleep je bestanden hier naartoe",
  "Drag your files here to add to your post": "Sleep je bestanden hier naartoe om aan je bericht toe te voegen",
  "Edit Message": "Pas bericht aan",
  "Edit message request failed": "Verzoek om bericht bewerken mislukt",
  "Emoji matching": "Emoji-overeenkomsten",
  "Empty message...": "Leeg bericht...",
  "Error adding flag": "Fout bij toevoegen van vlag",
  "Error connecting to chat, refresh the page to try again.": "Fout bij het verbinden, ververs de pagina om nogmaals te proberen",
  "Error deleting message": "Fout bij verwijderen van bericht",
  "Error muting a user ...": "Fout bij het muten van de gebruiker",
  "Error pinning message": "Fout bij vastzetten van bericht",
  "Error removing message pin": "Fout bij verwijderen van berichtpin",
  "Error unmuting a user ...": "Fout bij het unmuten van de gebruiker",
  "Error uploading file": "Fout bij uploaden bestand",
  "Error uploading image": "Fout bij uploaden afbeelding",
  "Error · Unsent": "Error: · niet verzonden",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  Flag: "Markeer",
  "Latest Messages": "Laatste berichten",
  "Load more": "Meer laden",
  Menu: "Menu",
  "Message Failed · Click to try again": "Bericht mislukt, klik om het nogmaals te proberen",
  "Message Failed · Unauthorized": "Bericht mislukt, ongeautoriseerd",
  "Message deleted": "Bericht verwijderd",
  "Message has been successfully flagged": "Bericht is succesvol gemarkeerd",
  "Message pinned": "Bericht vastgezet",
  Mute: "Mute",
  New: "Nieuwe",
  "New Messages!": "Nieuwe Berichten!",
  "No chats here yet…": "Nog geen chats hier...",
  "No results found": "Geen resultaten gevonden",
  "Nothing yet...": "Nog niets ...",
  "Open emoji picker": "Open emojipicker",
  "People matching": "Mensen die matchen",
  "Pick your emoji": "Kies je emoji",
  Pin: "Pin",
  "Pinned by": "Vastgemaakt door",
  Reply: "Antwoord",
  "Reply to Message": "Antwoord op bericht",
  Search: "Zoeken",
  "Searching...": "Zoeken...",
  Send: "Verstuur",
  "Send message request failed": "Verzoek om bericht te verzenden mislukt",
  "Sending...": "Aan het verzenden...",
  Shuffle: "Schudden",
  "Slow Mode ON": "Langzame modus aan",
  "Some of the files will not be accepted": "Sommige bestanden zullen niet worden geaccepteerd",
  "This message was deleted...": "Dit bericht was verwijderd",
  Thread: "Draadje",
  "Type your message": "Type je bericht",
  Unmute: "Unmute",
  Unpin: "Losmaken",
  'Upload type: "{{ type }}" is not allowed': 'Uploadtype: "{{ type }}" is niet toegestaan',
  "User uploaded content": "Gebruikersgeüploade inhoud",
  "Wait until all attachments have uploaded": "Wacht tot alle bijlagen zijn geüpload",
  "You have no channels currently": "Er zijn geen chats beschikbaar",
  "You've reached the maximum number of files": "Je hebt het maximale aantal bestanden bereikt",
  "ban-command-args": "[@gebruikersnaam] [tekst]",
  "ban-command-description": "Een gebruiker verbannen",
  "giphy-command-args": "[tekst]",
  "giphy-command-description": "Plaats een willekeurige gif in het kanaal",
  live: "live",
  "mute-command-args": "[@gebruikersnaam]",
  "mute-command-description": "Een gebruiker dempen",
  replyCount_one: "1 antwoord",
  replyCount_other: "{{ count }} antwoorden",
  searchResultsCount_one: "1 resultaat",
  searchResultsCount_other: "{{ count }} resultaten",
  "this content could not be displayed": "Deze inhoud kan niet weergegeven worden",
  "unban-command-args": "[@gebruikersnaam]",
  "unban-command-description": "Een gebruiker debannen",
  "unmute-command-args": "[@gebruikersnaam]",
  "unmute-command-description": "Een gebruiker niet meer dempen",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} en {{ moreCount }} meer",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} en {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} en {{ secondUser }}",
  "{{ imageCount }} more": "+{{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} deelnemers",
  "{{ user }} has been muted": "{{ user }} is muted",
  "{{ user }} has been unmuted": "{{ user }} is unmuted",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "🏙 Attachment...": "🏙 Bijlage..."
};

// node_modules/stream-chat-react/dist/i18n/pt.json
var pt_default = {
  "Attach files": "Anexar arquivos",
  Cancel: "Cancelar",
  "Channel Missing": "Canal ausente",
  Close: "Fechar",
  "Close emoji picker": "Fechar seletor de emoji",
  "Commands matching": "Comandos correspondentes",
  "Connection failure, reconnecting now...": "Falha de conexão, reconectando agora...",
  Delete: "Excluir",
  Delivered: "Entregue",
  "Drag your files here": "Arraste seus arquivos aqui",
  "Drag your files here to add to your post": "Arraste seus arquivos aqui para adicionar ao seu post",
  "Edit Message": "Editar Mensagem",
  "Edit message request failed": "O pedido de edição da mensagem falhou",
  "Emoji matching": "Emoji correspondente",
  "Empty message...": "Mensagem vazia...",
  "Error adding flag": "Erro ao reportar",
  "Error connecting to chat, refresh the page to try again.": "Erro ao conectar ao bate-papo, atualize a página para tentar novamente.",
  "Error deleting message": "Erro ao deletar mensagem",
  "Error muting a user ...": "Erro ao silenciar um usuário...",
  "Error pinning message": "Erro ao fixar mensagem",
  "Error removing message pin": "Erro ao remover o PIN da mensagem",
  "Error unmuting a user ...": "Erro ao ativar o som de um usuário...",
  "Error uploading file": "Erro ao enviar arquivo",
  "Error uploading image": "Erro ao carregar a imagem",
  "Error · Unsent": "Erro · Não enviado",
  "Error: {{ errorMessage }}": "Erro: {{ errorMessage }}",
  Flag: "Reportar",
  "Latest Messages": "Mensagens mais recentes",
  "Load more": "Carregar mais",
  Menu: "Menu",
  "Message Failed · Click to try again": "A mensagem falhou · Clique para tentar novamente",
  "Message Failed · Unauthorized": "A mensagem falhou · não autorizado",
  "Message deleted": "Mensagem apagada",
  "Message has been successfully flagged": "A mensagem foi reportada com sucesso",
  "Message pinned": "Mensagem fixada",
  Mute: "Mudo",
  New: "Novo",
  "New Messages!": "Novas mensagens!",
  "No chats here yet…": "Ainda não há conversas aqui...",
  "No results found": "Nenhum resultado encontrado",
  "Nothing yet...": "Nada ainda...",
  "Open emoji picker": "Abrir seletor de emoji",
  "People matching": "Pessoas correspondentes",
  "Pick your emoji": "Escolha o seu emoji",
  Pin: "Fixar",
  "Pinned by": "Fixado por",
  Reply: "Responder",
  "Reply to Message": "Responder a mensagem",
  Search: "Procurar",
  "Searching...": "Procurando...",
  Send: "Enviar",
  "Send message request failed": "O pedido de envio de mensagem falhou",
  "Sending...": "Enviando...",
  Shuffle: "Embaralhar",
  "Slow Mode ON": "Modo lento LIGADO",
  "Some of the files will not be accepted": "Alguns dos arquivos não serão aceitos",
  "This message was deleted...": "Esta mensagem foi excluída...",
  Thread: "Fio",
  "Type your message": "Digite sua mensagem",
  Unmute: "Ativar som",
  Unpin: "Liberar",
  'Upload type: "{{ type }}" is not allowed': 'Tipo de upload: "{{ type }}" não é permitido',
  "User uploaded content": "Conteúdo enviado pelo usuário",
  "Wait until all attachments have uploaded": "Espere até que todos os anexos tenham sido carregados",
  "You have no channels currently": "Você não tem canais atualmente",
  "You've reached the maximum number of files": "Você atingiu o número máximo de arquivos",
  "ban-command-args": "[@nomedeusuário] [texto]",
  "ban-command-description": "Banir um usuário",
  "giphy-command-args": "[texto]",
  "giphy-command-description": "Postar um gif aleatório no canal",
  live: "ao vivo",
  "mute-command-args": "[@nomedeusuário]",
  "mute-command-description": "Silenciar um usuário",
  replyCount_many: "{{ count }} respostas",
  replyCount_one: "1 resposta",
  replyCount_other: "{{ count }} respostas",
  searchResultsCount_many: "{{ count }} resultados",
  searchResultsCount_one: "1 resultado",
  searchResultsCount_other: "{{ count }} resultados",
  "this content could not be displayed": "este conteúdo não pôde ser exibido",
  "unban-command-args": "[@nomedeusuário]",
  "unban-command-description": "Desbanir um usuário",
  "unmute-command-args": "[@nomedeusuário]",
  "unmute-command-description": "Retirar o silenciamento de um usuário",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} e mais {{ moreCount }}",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} e {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} e {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} mais",
  "{{ memberCount }} members": "{{ memberCount }} membros",
  "{{ user }} has been muted": "{{ user }} foi silenciado",
  "{{ user }} has been unmuted": "{{ user }} foi reativado",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "🏙 Attachment...": "🏙 Anexo..."
};

// node_modules/stream-chat-react/dist/i18n/ru.json
var ru_default = {
  "Attach files": "Прикрепить файлы",
  Cancel: "Отмена",
  "Channel Missing": "Канал не найден",
  Close: "Закрыть",
  "Close emoji picker": "Закрыть окно выбора смайлов",
  "Commands matching": "Соответствие команд",
  "Connection failure, reconnecting now...": "Ошибка соединения, переподключение...",
  Delete: "Удалить",
  Delivered: "Отправлено",
  "Drag your files here": "Перетащите ваши файлы сюда",
  "Drag your files here to add to your post": "Перетащите ваши файлы сюда, чтобы добавить их в ваш пост",
  "Edit Message": "Редактировать сообщение",
  "Edit message request failed": "Не удалось изменить запрос сообщения",
  "Emoji matching": "Соответствие эмодзи",
  "Empty message...": "Пустое сообщение...",
  "Error adding flag": "Ошибка добавления флага",
  "Error connecting to chat, refresh the page to try again.": "Ошибка подключения к чату, обновите страницу чтобы попробовать снова.",
  "Error deleting message": "Ошибка при удалении сообщения",
  "Error muting a user ...": "Ошибка отключения уведомлений от пользователя...",
  "Error pinning message": "Сообщение об ошибке при закреплении",
  "Error removing message pin": "Ошибка при удалении булавки сообщения",
  "Error unmuting a user ...": "Ошибка включения уведомлений...",
  "Error uploading file": "Ошибка при загрузке файла",
  "Error uploading image": "Ошибка загрузки изображения",
  "Error · Unsent": "Ошибка · Не отправлено",
  "Error: {{ errorMessage }}": "Ошибка: {{ errorMessage }}",
  Flag: "Пожаловаться",
  "Latest Messages": "Последние сообщения",
  "Load more": "Загрузить больше",
  Menu: "Меню",
  "Message Failed · Click to try again": "Ошибка отправки сообщения · Нажмите чтобы повторить",
  "Message Failed · Unauthorized": "Ошибка отправки сообщения · Неавторизованный",
  "Message deleted": "Сообщение удалено",
  "Message has been successfully flagged": "Жалоба на сообщение была принята",
  "Message pinned": "Сообщение закреплено",
  Mute: "Отключить уведомления",
  New: "Новые",
  "New Messages!": "Новые сообщения!",
  "No chats here yet…": "Здесь еще нет чатов...",
  "No results found": "результаты не найдены",
  "Nothing yet...": "Пока ничего нет...",
  "Open emoji picker": "Выбрать emoji",
  "People matching": "Соответствующие люди",
  "Pick your emoji": "Выберите свой emoji",
  Pin: "Штырь",
  "Pinned by": "Закреплено",
  Reply: "Отвечать",
  "Reply to Message": "Ответить на сообщение",
  Search: "Поиск",
  "Searching...": "Ищем...",
  Send: "Отправить",
  "Send message request failed": "Не удалось отправить запрос на отправку сообщения",
  "Sending...": "Отправка...",
  Shuffle: "Перемешать",
  "Slow Mode ON": "Медленный режим включен",
  "Some of the files will not be accepted": "Некоторые файлы не будут приняты",
  "This message was deleted...": "Сообщение было удалено...",
  Thread: "Ветка",
  "Type your message": "Ваше сообщение",
  Unmute: "Включить уведомления",
  Unpin: "Открепить",
  'Upload type: "{{ type }}" is not allowed': 'Тип загрузки: "{{ type }}" не разрешен',
  "User uploaded content": "Пользователь загрузил контент",
  "Wait until all attachments have uploaded": "Подождите, пока все вложения загрузятся",
  "You have no channels currently": "У вас нет каналов в данный момент",
  "You've reached the maximum number of files": "Вы достигли максимального количества файлов",
  "ban-command-args": "[@имяпользователя] [текст]",
  "ban-command-description": "Заблокировать пользователя",
  "giphy-command-args": "[текст]",
  "giphy-command-description": "Опубликовать случайную GIF-анимацию в канале",
  live: "В прямом эфире",
  "mute-command-args": "[@имяпользователя]",
  "mute-command-description": "Выключить микрофон у пользователя",
  replyCount_few: "{{ count }} ответов",
  replyCount_many: "{{ count }} ответов",
  replyCount_one: "1 ответ",
  replyCount_other: "{{ count }} ответов",
  searchResultsCount_few: "{{ count }} результата",
  searchResultsCount_many: "{{ count }} результатов",
  searchResultsCount_one: "1 результат",
  searchResultsCount_other: "{{ count }} результатов",
  "this content could not be displayed": "Этот контент не может быть отображен в данный момент",
  "unban-command-args": "[@имяпользователя]",
  "unban-command-description": "Разблокировать пользователя",
  "unmute-command-args": "[@имяпользователя]",
  "unmute-command-description": "Включить микрофон у пользователя",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} и {{ moreCount }} еще",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} и {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} и {{ secondUser }}",
  "{{ imageCount }} more": "Ещё {{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} члены",
  "{{ user }} has been muted": "Вы отписались от уведомлений от {{ user }}",
  "{{ user }} has been unmuted": "Уведомления от {{ user }} были включены",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} в сети",
  "🏙 Attachment...": "🏙 Вложение..."
};

// node_modules/stream-chat-react/dist/i18n/tr.json
var tr_default = {
  "Attach files": "Dosya ekle",
  Cancel: "İptal",
  "Channel Missing": "Kanal bulunamıyor",
  Close: "Kapat",
  "Close emoji picker": "Emoji seçiciyi kapat",
  "Commands matching": "Eşleşen komutlar",
  "Connection failure, reconnecting now...": "Bağlantı hatası, tekrar bağlanılıyor...",
  Delete: "Sil",
  Delivered: "İletildi",
  "Drag your files here": "Dosyalarınızı buraya sürükleyin",
  "Drag your files here to add to your post": "Gönderinize eklemek için dosyalarınızı buraya sürükleyin",
  "Edit Message": "Mesajı Düzenle",
  "Edit message request failed": "Mesaj düzenleme isteği başarısız oldu",
  "Emoji matching": "Emoji eşleştirme",
  "Empty message...": "Boş mesaj...",
  "Error adding flag": "Bayrak eklenirken hata oluştu",
  "Error connecting to chat, refresh the page to try again.": "Bağlantı hatası, sayfayı yenileyip tekrar deneyin.",
  "Error deleting message": "Mesaj silinirken hata oluştu",
  "Error muting a user ...": "Kullanıcıyı sessize alırken hata oluştu ...",
  "Error pinning message": "Mesaj sabitlenirken hata oluştu",
  "Error removing message pin": "Mesaj PIN'i kaldırılırken hata oluştu",
  "Error unmuting a user ...": "Kullanıcının sesini açarken hata oluştu ...",
  "Error uploading file": "Dosya yüklenirken hata oluştu",
  "Error uploading image": "Resmi yüklerken hata",
  "Error · Unsent": "Hata · Gönderilemedi",
  "Error: {{ errorMessage }}": "Hata: {{ errorMessage }}",
  Flag: "Bayrak",
  "Latest Messages": "Son Mesajlar",
  "Load more": "Daha fazla yükle",
  Menu: "Menü",
  "Message Failed · Click to try again": "Mesaj Başarısız · Tekrar denemek için tıklayın",
  "Message Failed · Unauthorized": "Mesaj Başarısız · Yetkisiz",
  "Message deleted": "Mesaj silindi",
  "Message has been successfully flagged": "Mesaj başarıyla bayraklandı",
  "Message pinned": "Mesaj sabitlendi",
  Mute: "Sessiz",
  New: "Yeni",
  "New Messages!": "Yeni Mesajlar!",
  "No chats here yet…": "Henüz burada sohbet yok...",
  "No results found": "Sonuç bulunamadı",
  "Nothing yet...": "Şimdilik hiçbir şey...",
  "Open emoji picker": "Emoji klavyesini aç",
  "People matching": "Eşleşen kişiler",
  "Pick your emoji": "Emoji seçin",
  Pin: "Toplu iğne",
  "Pinned by": "Sabitleyen",
  Reply: "Cevapla",
  "Reply to Message": "Mesajı Cevapla",
  Search: "Arama",
  "Searching...": "Aranıyor...",
  Send: "Gönder",
  "Send message request failed": "Mesaj gönderme isteği başarısız oldu",
  "Sending...": "Gönderiliyor...",
  Shuffle: "Karıştır",
  "Slow Mode ON": "Yavaş Mod Açık",
  "Some of the files will not be accepted": "Bazı dosyalar kabul edilmeyecektir",
  "This message was deleted...": "Bu mesaj silindi",
  Thread: "Konu",
  "Type your message": "Mesajınızı yazın",
  Unmute: "Sesini aç",
  Unpin: "Sabitlemeyi kaldır",
  'Upload type: "{{ type }}" is not allowed': 'Yükleme türü: "{{ type }}" izin verilmez',
  "User uploaded content": "Kullanıcı tarafından yüklenen içerik",
  "Wait until all attachments have uploaded": "Tüm ekler yüklenene kadar bekleyin",
  "You have no channels currently": "Henüz kanalınız yok",
  "You've reached the maximum number of files": "Maksimum dosya sayısına ulaştınız",
  "ban-command-args": "[@kullanıcıadı] [metin]",
  "ban-command-description": "Bir kullanıcıyı yasakla",
  "giphy-command-args": "[metin]",
  "giphy-command-description": "Rastgele bir gif'i kanala gönder",
  live: "canlı",
  "mute-command-args": "[@kullanıcıadı]",
  "mute-command-description": "Bir kullanıcının sesini kapat",
  replyCount_one: "1 cevap",
  replyCount_other: "{{ count }} cevaplar",
  searchResultsCount_one: "1 sonuç",
  searchResultsCount_other: "{{ count }} sonuç",
  "this content could not be displayed": "bu içerik gösterilemiyor",
  "unban-command-args": "[@kullanıcıadı]",
  "unban-command-description": "Bir kullanıcının yasağını kaldır",
  "unmute-command-args": "[@kullanıcıadı]",
  "unmute-command-description": "Bir kullanıcının sesini aç",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} ve {{ moreCount }} daha",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }}, ve {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} ve {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} adet daha",
  "{{ memberCount }} members": "{{ memberCount }} üyeler",
  "{{ user }} has been muted": "{{ user }} sessize alındı",
  "{{ user }} has been unmuted": "{{ user }} sesi açıldı",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} çevrimiçi",
  "🏙 Attachment...": "🏙 Ek..."
};

// node_modules/@babel/runtime/helpers/esm/toArray.js
function _toArray(r) {
  return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest();
}

// node_modules/i18next/dist/esm/i18next.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var consoleLogger = {
  type: "logger",
  log: function log(args) {
    this.output("log", args);
  },
  warn: function warn(args) {
    this.output("warn", args);
  },
  error: function error(args) {
    this.output("error", args);
  },
  output: function output(type, args) {
    if (console && console[type])
      console[type].apply(console, args);
  }
};
var Logger = function() {
  function Logger2(concreteLogger) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck(this, Logger2);
    this.init(concreteLogger, options);
  }
  _createClass(Logger2, [{
    key: "init",
    value: function init2(concreteLogger) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      this.prefix = options.prefix || "i18next:";
      this.logger = concreteLogger || consoleLogger;
      this.options = options;
      this.debug = options.debug;
    }
  }, {
    key: "setDebug",
    value: function setDebug(bool) {
      this.debug = bool;
    }
  }, {
    key: "log",
    value: function log2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return this.forward(args, "log", "", true);
    }
  }, {
    key: "warn",
    value: function warn2() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return this.forward(args, "warn", "", true);
    }
  }, {
    key: "error",
    value: function error2() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return this.forward(args, "error", "");
    }
  }, {
    key: "deprecate",
    value: function deprecate() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
    }
  }, {
    key: "forward",
    value: function forward(args, lvl, prefix, debugOnly) {
      if (debugOnly && !this.debug)
        return null;
      if (typeof args[0] === "string")
        args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
      return this.logger[lvl](args);
    }
  }, {
    key: "create",
    value: function create(moduleName) {
      return new Logger2(this.logger, _objectSpread(_objectSpread({}, {
        prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
      }), this.options));
    }
  }, {
    key: "clone",
    value: function clone(options) {
      options = options || this.options;
      options.prefix = options.prefix || this.prefix;
      return new Logger2(this.logger, options);
    }
  }]);
  return Logger2;
}();
var baseLogger = new Logger();
var EventEmitter = function() {
  function EventEmitter2() {
    _classCallCheck(this, EventEmitter2);
    this.observers = {};
  }
  _createClass(EventEmitter2, [{
    key: "on",
    value: function on(events, listener) {
      var _this = this;
      events.split(" ").forEach(function(event) {
        _this.observers[event] = _this.observers[event] || [];
        _this.observers[event].push(listener);
      });
      return this;
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      if (!this.observers[event])
        return;
      if (!listener) {
        delete this.observers[event];
        return;
      }
      this.observers[event] = this.observers[event].filter(function(l) {
        return l !== listener;
      });
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (this.observers[event]) {
        var cloned = [].concat(this.observers[event]);
        cloned.forEach(function(observer) {
          observer.apply(void 0, args);
        });
      }
      if (this.observers["*"]) {
        var _cloned = [].concat(this.observers["*"]);
        _cloned.forEach(function(observer) {
          observer.apply(observer, [event].concat(args));
        });
      }
    }
  }]);
  return EventEmitter2;
}();
function defer() {
  var res;
  var rej;
  var promise = new Promise(function(resolve, reject) {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object) {
  if (object == null)
    return "";
  return "" + object;
}
function copy(a, s, t2) {
  a.forEach(function(m) {
    if (s[m])
      t2[m] = s[m];
  });
}
function getLastOfPath(object, path, Empty) {
  function cleanKey(key2) {
    return key2 && key2.indexOf("###") > -1 ? key2.replace(/###/g, ".") : key2;
  }
  function canNotTraverseDeeper() {
    return !object || typeof object === "string";
  }
  var stack = typeof path !== "string" ? [].concat(path) : path.split(".");
  while (stack.length > 1) {
    if (canNotTraverseDeeper())
      return {};
    var key = cleanKey(stack.shift());
    if (!object[key] && Empty)
      object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
  }
  if (canNotTraverseDeeper())
    return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}
function setPath(object, path, newValue) {
  var _getLastOfPath = getLastOfPath(object, path, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;
  obj[k] = newValue;
}
function pushPath(object, path, newValue, concat) {
  var _getLastOfPath2 = getLastOfPath(object, path, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;
  obj[k] = obj[k] || [];
  if (concat)
    obj[k] = obj[k].concat(newValue);
  if (!concat)
    obj[k].push(newValue);
}
function getPath(object, path) {
  var _getLastOfPath3 = getLastOfPath(object, path), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;
  if (!obj)
    return void 0;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  var value = getPath(data, key);
  if (value !== void 0) {
    return value;
  }
  return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (var prop in source) {
    if (prop !== "__proto__" && prop !== "constructor") {
      if (prop in target) {
        if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
          if (overwrite)
            target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
var _entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
function escape(data) {
  if (typeof data === "string") {
    return data.replace(/[&<>"'\/]/g, function(s) {
      return _entityMap[s];
    });
  }
  return data;
}
var isIE10 = typeof window !== "undefined" && window.navigator && typeof window.navigator.userAgentData === "undefined" && window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE") > -1;
var chars = [" ", ",", "?", "!", ";"];
function looksLikeObjectPath(key, nsSeparator, keySeparator) {
  nsSeparator = nsSeparator || "";
  keySeparator = keySeparator || "";
  var possibleChars = chars.filter(function(c) {
    return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
  });
  if (possibleChars.length === 0)
    return true;
  var r = new RegExp("(".concat(possibleChars.map(function(c) {
    return c === "?" ? "\\?" : c;
  }).join("|"), ")"));
  var matched = !r.test(key);
  if (!matched) {
    var ki = key.indexOf(keySeparator);
    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
}
function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function deepFind(obj, path) {
  var keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!obj)
    return void 0;
  if (obj[path])
    return obj[path];
  var paths = path.split(keySeparator);
  var current = obj;
  for (var i = 0; i < paths.length; ++i) {
    if (!current)
      return void 0;
    if (typeof current[paths[i]] === "string" && i + 1 < paths.length) {
      return void 0;
    }
    if (current[paths[i]] === void 0) {
      var j = 2;
      var p = paths.slice(i, i + j).join(keySeparator);
      var mix = current[p];
      while (mix === void 0 && paths.length > i + j) {
        j++;
        p = paths.slice(i, i + j).join(keySeparator);
        mix = current[p];
      }
      if (mix === void 0)
        return void 0;
      if (mix === null)
        return null;
      if (path.endsWith(p)) {
        if (typeof mix === "string")
          return mix;
        if (p && typeof mix[p] === "string")
          return mix[p];
      }
      var joinedPath = paths.slice(i + j).join(keySeparator);
      if (joinedPath)
        return deepFind(mix, joinedPath, keySeparator);
      return void 0;
    }
    current = current[paths[i]];
  }
  return current;
}
var ResourceStore = function(_EventEmitter) {
  _inherits(ResourceStore2, _EventEmitter);
  var _super = _createSuper(ResourceStore2);
  function ResourceStore2(data) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    _classCallCheck(this, ResourceStore2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.data = data || {};
    _this.options = options;
    if (_this.options.keySeparator === void 0) {
      _this.options.keySeparator = ".";
    }
    if (_this.options.ignoreJSONStructure === void 0) {
      _this.options.ignoreJSONStructure = true;
    }
    return _this;
  }
  _createClass(ResourceStore2, [{
    key: "addNamespaces",
    value: function addNamespaces(ns) {
      if (this.options.ns.indexOf(ns) < 0) {
        this.options.ns.push(ns);
      }
    }
  }, {
    key: "removeNamespaces",
    value: function removeNamespaces(ns) {
      var index = this.options.ns.indexOf(ns);
      if (index > -1) {
        this.options.ns.splice(index, 1);
      }
    }
  }, {
    key: "getResource",
    value: function getResource(lng, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
      var ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
      var path = [lng, ns];
      if (key && typeof key !== "string")
        path = path.concat(key);
      if (key && typeof key === "string")
        path = path.concat(keySeparator ? key.split(keySeparator) : key);
      if (lng.indexOf(".") > -1) {
        path = lng.split(".");
      }
      var result = getPath(this.data, path);
      if (result || !ignoreJSONStructure || typeof key !== "string")
        return result;
      return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
    }
  }, {
    key: "addResource",
    value: function addResource(lng, ns, key, value) {
      var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
        silent: false
      };
      var keySeparator = this.options.keySeparator;
      if (keySeparator === void 0)
        keySeparator = ".";
      var path = [lng, ns];
      if (key)
        path = path.concat(keySeparator ? key.split(keySeparator) : key);
      if (lng.indexOf(".") > -1) {
        path = lng.split(".");
        value = ns;
        ns = path[1];
      }
      this.addNamespaces(ns);
      setPath(this.data, path, value);
      if (!options.silent)
        this.emit("added", lng, ns, key, value);
    }
  }, {
    key: "addResources",
    value: function addResources(lng, ns, resources) {
      var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
        silent: false
      };
      for (var m in resources) {
        if (typeof resources[m] === "string" || Object.prototype.toString.apply(resources[m]) === "[object Array]")
          this.addResource(lng, ns, m, resources[m], {
            silent: true
          });
      }
      if (!options.silent)
        this.emit("added", lng, ns, resources);
    }
  }, {
    key: "addResourceBundle",
    value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
      var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
        silent: false
      };
      var path = [lng, ns];
      if (lng.indexOf(".") > -1) {
        path = lng.split(".");
        deep = resources;
        resources = ns;
        ns = path[1];
      }
      this.addNamespaces(ns);
      var pack = getPath(this.data, path) || {};
      if (deep) {
        deepExtend(pack, resources, overwrite);
      } else {
        pack = _objectSpread$1(_objectSpread$1({}, pack), resources);
      }
      setPath(this.data, path, pack);
      if (!options.silent)
        this.emit("added", lng, ns, resources);
    }
  }, {
    key: "removeResourceBundle",
    value: function removeResourceBundle(lng, ns) {
      if (this.hasResourceBundle(lng, ns)) {
        delete this.data[lng][ns];
      }
      this.removeNamespaces(ns);
      this.emit("removed", lng, ns);
    }
  }, {
    key: "hasResourceBundle",
    value: function hasResourceBundle(lng, ns) {
      return this.getResource(lng, ns) !== void 0;
    }
  }, {
    key: "getResourceBundle",
    value: function getResourceBundle(lng, ns) {
      if (!ns)
        ns = this.options.defaultNS;
      if (this.options.compatibilityAPI === "v1")
        return _objectSpread$1(_objectSpread$1({}, {}), this.getResource(lng, ns));
      return this.getResource(lng, ns);
    }
  }, {
    key: "getDataByLanguage",
    value: function getDataByLanguage(lng) {
      return this.data[lng];
    }
  }, {
    key: "hasLanguageSomeTranslations",
    value: function hasLanguageSomeTranslations(lng) {
      var data = this.getDataByLanguage(lng);
      var n = data && Object.keys(data) || [];
      return !!n.find(function(v) {
        return data[v] && Object.keys(data[v]).length > 0;
      });
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.data;
    }
  }]);
  return ResourceStore2;
}(EventEmitter);
var postProcessor = {
  processors: {},
  addPostProcessor: function addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle: function handle(processors, value, key, options, translator) {
    var _this = this;
    processors.forEach(function(processor) {
      if (_this.processors[processor])
        value = _this.processors[processor].process(value, key, options, translator);
    });
    return value;
  }
};
function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$2(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var checkedLoadedFor = {};
var Translator = function(_EventEmitter) {
  _inherits(Translator2, _EventEmitter);
  var _super = _createSuper$1(Translator2);
  function Translator2(services) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck(this, Translator2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, _assertThisInitialized(_this));
    _this.options = options;
    if (_this.options.keySeparator === void 0) {
      _this.options.keySeparator = ".";
    }
    _this.logger = baseLogger.create("translator");
    return _this;
  }
  _createClass(Translator2, [{
    key: "changeLanguage",
    value: function changeLanguage2(lng) {
      if (lng)
        this.language = lng;
    }
  }, {
    key: "exists",
    value: function exists2(key) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        interpolation: {}
      };
      if (key === void 0 || key === null) {
        return false;
      }
      var resolved = this.resolve(key, options);
      return resolved && resolved.res !== void 0;
    }
  }, {
    key: "extractFromKey",
    value: function extractFromKey(key, options) {
      var nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;
      if (nsSeparator === void 0)
        nsSeparator = ":";
      var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
      var namespaces = options.ns || this.options.defaultNS || [];
      var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
      var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
      if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
        var m = key.match(this.interpolator.nestingRegexp);
        if (m && m.length > 0) {
          return {
            key,
            namespaces
          };
        }
        var parts = key.split(nsSeparator);
        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)
          namespaces = parts.shift();
        key = parts.join(keySeparator);
      }
      if (typeof namespaces === "string")
        namespaces = [namespaces];
      return {
        key,
        namespaces
      };
    }
  }, {
    key: "translate",
    value: function translate(keys, options, lastKey) {
      var _this2 = this;
      if (_typeof(options) !== "object" && this.options.overloadTranslationOptionHandler) {
        options = this.options.overloadTranslationOptionHandler(arguments);
      }
      if (!options)
        options = {};
      if (keys === void 0 || keys === null)
        return "";
      if (!Array.isArray(keys))
        keys = [String(keys)];
      var returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;
      var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
      var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options), key = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
      var namespace = namespaces[namespaces.length - 1];
      var lng = options.lng || this.language;
      var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
      if (lng && lng.toLowerCase() === "cimode") {
        if (appendNamespaceToCIMode) {
          var nsSeparator = options.nsSeparator || this.options.nsSeparator;
          if (returnDetails) {
            resolved.res = "".concat(namespace).concat(nsSeparator).concat(key);
            return resolved;
          }
          return "".concat(namespace).concat(nsSeparator).concat(key);
        }
        if (returnDetails) {
          resolved.res = key;
          return resolved;
        }
        return key;
      }
      var resolved = this.resolve(keys, options);
      var res = resolved && resolved.res;
      var resUsedKey = resolved && resolved.usedKey || key;
      var resExactUsedKey = resolved && resolved.exactUsedKey || key;
      var resType = Object.prototype.toString.apply(res);
      var noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
      var joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
      var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
      var handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && resType === "[object Array]")) {
        if (!options.returnObjects && !this.options.returnObjects) {
          if (!this.options.returnedObjectHandler) {
            this.logger.warn("accessing an object - but returnObjects options is not enabled!");
          }
          var r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2(_objectSpread$2({}, options), {}, {
            ns: namespaces
          })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
          if (returnDetails) {
            resolved.res = r;
            return resolved;
          }
          return r;
        }
        if (keySeparator) {
          var resTypeIsArray = resType === "[object Array]";
          var copy2 = resTypeIsArray ? [] : {};
          var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
          for (var m in res) {
            if (Object.prototype.hasOwnProperty.call(res, m)) {
              var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
              copy2[m] = this.translate(deepKey, _objectSpread$2(_objectSpread$2({}, options), {
                joinArrays: false,
                ns: namespaces
              }));
              if (copy2[m] === deepKey)
                copy2[m] = res[m];
            }
          }
          res = copy2;
        }
      } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && resType === "[object Array]") {
        res = res.join(joinArrays);
        if (res)
          res = this.extendTranslation(res, keys, options, lastKey);
      } else {
        var usedDefault = false;
        var usedKey = false;
        var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
        var hasDefaultValue = Translator2.hasDefaultValue(options);
        var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : "";
        var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;
        if (!this.isValidLookup(res) && hasDefaultValue) {
          usedDefault = true;
          res = defaultValue;
        }
        if (!this.isValidLookup(res)) {
          usedKey = true;
          res = key;
        }
        var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
        var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
        var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
        if (usedKey || usedDefault || updateMissing) {
          this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
          if (keySeparator) {
            var fk = this.resolve(key, _objectSpread$2(_objectSpread$2({}, options), {}, {
              keySeparator: false
            }));
            if (fk && fk.res)
              this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
          }
          var lngs = [];
          var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
          if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
            for (var i = 0; i < fallbackLngs.length; i++) {
              lngs.push(fallbackLngs[i]);
            }
          } else if (this.options.saveMissingTo === "all") {
            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
          } else {
            lngs.push(options.lng || this.language);
          }
          var send = function send2(l, k, specificDefaultValue) {
            var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
            if (_this2.options.missingKeyHandler) {
              _this2.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
              _this2.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
            }
            _this2.emit("missingKey", l, namespace, k, res);
          };
          if (this.options.saveMissing) {
            if (this.options.saveMissingPlurals && needsPluralHandling) {
              lngs.forEach(function(language) {
                _this2.pluralResolver.getSuffixes(language, options).forEach(function(suffix) {
                  send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                });
              });
            } else {
              send(lngs, key, defaultValue);
            }
          }
        }
        res = this.extendTranslation(res, keys, options, resolved, lastKey);
        if (usedKey && res === key && this.options.appendNamespaceToMissingKey)
          res = "".concat(namespace, ":").concat(key);
        if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
          if (this.options.compatibilityAPI !== "v1") {
            res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : void 0);
          } else {
            res = this.options.parseMissingKeyHandler(res);
          }
        }
      }
      if (returnDetails) {
        resolved.res = res;
        return resolved;
      }
      return res;
    }
  }, {
    key: "extendTranslation",
    value: function extendTranslation(res, key, options, resolved, lastKey) {
      var _this3 = this;
      if (this.i18nFormat && this.i18nFormat.parse) {
        res = this.i18nFormat.parse(res, _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), options), resolved.usedLng, resolved.usedNS, resolved.usedKey, {
          resolved
        });
      } else if (!options.skipInterpolation) {
        if (options.interpolation)
          this.interpolator.init(_objectSpread$2(_objectSpread$2({}, options), {
            interpolation: _objectSpread$2(_objectSpread$2({}, this.options.interpolation), options.interpolation)
          }));
        var skipOnVariables = typeof res === "string" && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
        var nestBef;
        if (skipOnVariables) {
          var nb = res.match(this.interpolator.nestingRegexp);
          nestBef = nb && nb.length;
        }
        var data = options.replace && typeof options.replace !== "string" ? options.replace : options;
        if (this.options.interpolation.defaultVariables)
          data = _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), data);
        res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
        if (skipOnVariables) {
          var na = res.match(this.interpolator.nestingRegexp);
          var nestAft = na && na.length;
          if (nestBef < nestAft)
            options.nest = false;
        }
        if (options.nest !== false)
          res = this.interpolator.nest(res, function() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            if (lastKey && lastKey[0] === args[0] && !options.context) {
              _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
              return null;
            }
            return _this3.translate.apply(_this3, args.concat([key]));
          }, options);
        if (options.interpolation)
          this.interpolator.reset();
      }
      var postProcess = options.postProcess || this.options.postProcess;
      var postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
      if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2({
          i18nResolved: resolved
        }, options) : options, this);
      }
      return res;
    }
  }, {
    key: "resolve",
    value: function resolve(keys) {
      var _this4 = this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var found;
      var usedKey;
      var exactUsedKey;
      var usedLng;
      var usedNS;
      if (typeof keys === "string")
        keys = [keys];
      keys.forEach(function(k) {
        if (_this4.isValidLookup(found))
          return;
        var extracted = _this4.extractFromKey(k, options);
        var key = extracted.key;
        usedKey = key;
        var namespaces = extracted.namespaces;
        if (_this4.options.fallbackNS)
          namespaces = namespaces.concat(_this4.options.fallbackNS);
        var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
        var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();
        var needsContextHandling = options.context !== void 0 && (typeof options.context === "string" || typeof options.context === "number") && options.context !== "";
        var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
        namespaces.forEach(function(ns) {
          if (_this4.isValidLookup(found))
            return;
          usedNS = ns;
          if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
            _this4.logger.warn('key "'.concat(usedKey, '" for languages "').concat(codes.join(", "), `" won't get resolved as namespace "`).concat(usedNS, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
          }
          codes.forEach(function(code) {
            if (_this4.isValidLookup(found))
              return;
            usedLng = code;
            var finalKeys = [key];
            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
              _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
            } else {
              var pluralSuffix;
              if (needsPluralHandling)
                pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
              var zeroSuffix = "".concat(_this4.options.pluralSeparator, "zero");
              if (needsPluralHandling) {
                finalKeys.push(key + pluralSuffix);
                if (needsZeroSuffixLookup) {
                  finalKeys.push(key + zeroSuffix);
                }
              }
              if (needsContextHandling) {
                var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                finalKeys.push(contextKey);
                if (needsPluralHandling) {
                  finalKeys.push(contextKey + pluralSuffix);
                  if (needsZeroSuffixLookup) {
                    finalKeys.push(contextKey + zeroSuffix);
                  }
                }
              }
            }
            var possibleKey;
            while (possibleKey = finalKeys.pop()) {
              if (!_this4.isValidLookup(found)) {
                exactUsedKey = possibleKey;
                found = _this4.getResource(code, ns, possibleKey, options);
              }
            }
          });
        });
      });
      return {
        res: found,
        usedKey,
        exactUsedKey,
        usedLng,
        usedNS
      };
    }
  }, {
    key: "isValidLookup",
    value: function isValidLookup(res) {
      return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
    }
  }, {
    key: "getResource",
    value: function getResource(code, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      if (this.i18nFormat && this.i18nFormat.getResource)
        return this.i18nFormat.getResource(code, ns, key, options);
      return this.resourceStore.getResource(code, ns, key, options);
    }
  }], [{
    key: "hasDefaultValue",
    value: function hasDefaultValue(options) {
      var prefix = "defaultValue";
      for (var option in options) {
        if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && void 0 !== options[option]) {
          return true;
        }
      }
      return false;
    }
  }]);
  return Translator2;
}(EventEmitter);
function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
var LanguageUtil = function() {
  function LanguageUtil2(options) {
    _classCallCheck(this, LanguageUtil2);
    this.options = options;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create("languageUtils");
  }
  _createClass(LanguageUtil2, [{
    key: "getScriptPartFromCode",
    value: function getScriptPartFromCode(code) {
      if (!code || code.indexOf("-") < 0)
        return null;
      var p = code.split("-");
      if (p.length === 2)
        return null;
      p.pop();
      if (p[p.length - 1].toLowerCase() === "x")
        return null;
      return this.formatLanguageCode(p.join("-"));
    }
  }, {
    key: "getLanguagePartFromCode",
    value: function getLanguagePartFromCode(code) {
      if (!code || code.indexOf("-") < 0)
        return code;
      var p = code.split("-");
      return this.formatLanguageCode(p[0]);
    }
  }, {
    key: "formatLanguageCode",
    value: function formatLanguageCode(code) {
      if (typeof code === "string" && code.indexOf("-") > -1) {
        var specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
        var p = code.split("-");
        if (this.options.lowerCaseLng) {
          p = p.map(function(part) {
            return part.toLowerCase();
          });
        } else if (p.length === 2) {
          p[0] = p[0].toLowerCase();
          p[1] = p[1].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1)
            p[1] = capitalize(p[1].toLowerCase());
        } else if (p.length === 3) {
          p[0] = p[0].toLowerCase();
          if (p[1].length === 2)
            p[1] = p[1].toUpperCase();
          if (p[0] !== "sgn" && p[2].length === 2)
            p[2] = p[2].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1)
            p[1] = capitalize(p[1].toLowerCase());
          if (specialCases.indexOf(p[2].toLowerCase()) > -1)
            p[2] = capitalize(p[2].toLowerCase());
        }
        return p.join("-");
      }
      return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
    }
  }, {
    key: "isSupportedCode",
    value: function isSupportedCode(code) {
      if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
        code = this.getLanguagePartFromCode(code);
      }
      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
    }
  }, {
    key: "getBestMatchFromCodes",
    value: function getBestMatchFromCodes(codes) {
      var _this = this;
      if (!codes)
        return null;
      var found;
      codes.forEach(function(code) {
        if (found)
          return;
        var cleanedLng = _this.formatLanguageCode(code);
        if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng))
          found = cleanedLng;
      });
      if (!found && this.options.supportedLngs) {
        codes.forEach(function(code) {
          if (found)
            return;
          var lngOnly = _this.getLanguagePartFromCode(code);
          if (_this.isSupportedCode(lngOnly))
            return found = lngOnly;
          found = _this.options.supportedLngs.find(function(supportedLng) {
            if (supportedLng.indexOf(lngOnly) === 0)
              return supportedLng;
          });
        });
      }
      if (!found)
        found = this.getFallbackCodes(this.options.fallbackLng)[0];
      return found;
    }
  }, {
    key: "getFallbackCodes",
    value: function getFallbackCodes(fallbacks, code) {
      if (!fallbacks)
        return [];
      if (typeof fallbacks === "function")
        fallbacks = fallbacks(code);
      if (typeof fallbacks === "string")
        fallbacks = [fallbacks];
      if (Object.prototype.toString.apply(fallbacks) === "[object Array]")
        return fallbacks;
      if (!code)
        return fallbacks["default"] || [];
      var found = fallbacks[code];
      if (!found)
        found = fallbacks[this.getScriptPartFromCode(code)];
      if (!found)
        found = fallbacks[this.formatLanguageCode(code)];
      if (!found)
        found = fallbacks[this.getLanguagePartFromCode(code)];
      if (!found)
        found = fallbacks["default"];
      return found || [];
    }
  }, {
    key: "toResolveHierarchy",
    value: function toResolveHierarchy(code, fallbackCode) {
      var _this2 = this;
      var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
      var codes = [];
      var addCode = function addCode2(c) {
        if (!c)
          return;
        if (_this2.isSupportedCode(c)) {
          codes.push(c);
        } else {
          _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
        }
      };
      if (typeof code === "string" && code.indexOf("-") > -1) {
        if (this.options.load !== "languageOnly")
          addCode(this.formatLanguageCode(code));
        if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly")
          addCode(this.getScriptPartFromCode(code));
        if (this.options.load !== "currentOnly")
          addCode(this.getLanguagePartFromCode(code));
      } else if (typeof code === "string") {
        addCode(this.formatLanguageCode(code));
      }
      fallbackCodes.forEach(function(fc) {
        if (codes.indexOf(fc) < 0)
          addCode(_this2.formatLanguageCode(fc));
      });
      return codes;
    }
  }]);
  return LanguageUtil2;
}();
var sets = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: function _(n) {
    return Number(n > 1);
  },
  2: function _2(n) {
    return Number(n != 1);
  },
  3: function _3(n) {
    return 0;
  },
  4: function _4(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function _5(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function _6(n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function _7(n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function _8(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function _9(n) {
    return Number(n >= 2);
  },
  10: function _10(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function _11(n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function _12(n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function _13(n) {
    return Number(n !== 0);
  },
  14: function _14(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function _15(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function _16(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function _17(n) {
    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
  },
  18: function _18(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function _19(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function _20(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function _21(n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  },
  22: function _22(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
  }
};
var deprecatedJsonVersions = ["v1", "v2", "v3"];
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
function createRules() {
  var rules = {};
  sets.forEach(function(set) {
    set.lngs.forEach(function(l) {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
}
var PluralResolver = function() {
  function PluralResolver2(languageUtils) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck(this, PluralResolver2);
    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create("pluralResolver");
    if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === "v4") && (typeof Intl === "undefined" || !Intl.PluralRules)) {
      this.options.compatibilityJSON = "v3";
      this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
    }
    this.rules = createRules();
  }
  _createClass(PluralResolver2, [{
    key: "addRule",
    value: function addRule(lng, obj) {
      this.rules[lng] = obj;
    }
  }, {
    key: "getRule",
    value: function getRule(code) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (this.shouldUseIntlApi()) {
        try {
          return new Intl.PluralRules(code, {
            type: options.ordinal ? "ordinal" : "cardinal"
          });
        } catch (_unused) {
          return;
        }
      }
      return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
    }
  }, {
    key: "needsPlural",
    value: function needsPlural(code) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var rule = this.getRule(code, options);
      if (this.shouldUseIntlApi()) {
        return rule && rule.resolvedOptions().pluralCategories.length > 1;
      }
      return rule && rule.numbers.length > 1;
    }
  }, {
    key: "getPluralFormsOfKey",
    value: function getPluralFormsOfKey(code, key) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return this.getSuffixes(code, options).map(function(suffix) {
        return "".concat(key).concat(suffix);
      });
    }
  }, {
    key: "getSuffixes",
    value: function getSuffixes(code) {
      var _this = this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var rule = this.getRule(code, options);
      if (!rule) {
        return [];
      }
      if (this.shouldUseIntlApi()) {
        return rule.resolvedOptions().pluralCategories.sort(function(pluralCategory1, pluralCategory2) {
          return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
        }).map(function(pluralCategory) {
          return "".concat(_this.options.prepend).concat(pluralCategory);
        });
      }
      return rule.numbers.map(function(number) {
        return _this.getSuffix(code, number, options);
      });
    }
  }, {
    key: "getSuffix",
    value: function getSuffix(code, count) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var rule = this.getRule(code, options);
      if (rule) {
        if (this.shouldUseIntlApi()) {
          return "".concat(this.options.prepend).concat(rule.select(count));
        }
        return this.getSuffixRetroCompatible(rule, count);
      }
      this.logger.warn("no plural rule found for: ".concat(code));
      return "";
    }
  }, {
    key: "getSuffixRetroCompatible",
    value: function getSuffixRetroCompatible(rule, count) {
      var _this2 = this;
      var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
      var suffix = rule.numbers[idx];
      if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        if (suffix === 2) {
          suffix = "plural";
        } else if (suffix === 1) {
          suffix = "";
        }
      }
      var returnSuffix = function returnSuffix2() {
        return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
      };
      if (this.options.compatibilityJSON === "v1") {
        if (suffix === 1)
          return "";
        if (typeof suffix === "number")
          return "_plural_".concat(suffix.toString());
        return returnSuffix();
      } else if (this.options.compatibilityJSON === "v2") {
        return returnSuffix();
      } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        return returnSuffix();
      }
      return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
    }
  }, {
    key: "shouldUseIntlApi",
    value: function shouldUseIntlApi() {
      return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
    }
  }]);
  return PluralResolver2;
}();
function ownKeys$3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$3(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var Interpolator = function() {
  function Interpolator2() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _classCallCheck(this, Interpolator2);
    this.logger = baseLogger.create("interpolator");
    this.options = options;
    this.format = options.interpolation && options.interpolation.format || function(value) {
      return value;
    };
    this.init(options);
  }
  _createClass(Interpolator2, [{
    key: "init",
    value: function init2() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      if (!options.interpolation)
        options.interpolation = {
          escapeValue: true
        };
      var iOpts = options.interpolation;
      this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;
      this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
      this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;
      this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
      this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
      this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
      this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
      this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape("$t(");
      this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(")");
      this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ",";
      this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;
      this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;
      this.resetRegExp();
    }
  }, {
    key: "reset",
    value: function reset() {
      if (this.options)
        this.init(this.options);
    }
  }, {
    key: "resetRegExp",
    value: function resetRegExp() {
      var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
      this.regexp = new RegExp(regexpStr, "g");
      var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
      this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
      var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
      this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
    }
  }, {
    key: "interpolate",
    value: function interpolate(str, data, lng, options) {
      var _this = this;
      var match;
      var value;
      var replaces;
      var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
      function regexSafe(val) {
        return val.replace(/\$/g, "$$$$");
      }
      var handleFormat = function handleFormat2(key) {
        if (key.indexOf(_this.formatSeparator) < 0) {
          var path = getPathWithDefaults(data, defaultData, key);
          return _this.alwaysFormat ? _this.format(path, void 0, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
            interpolationkey: key
          })) : path;
        }
        var p = key.split(_this.formatSeparator);
        var k = p.shift().trim();
        var f = p.join(_this.formatSeparator).trim();
        return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
          interpolationkey: k
        }));
      };
      this.resetRegExp();
      var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
      var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
      var todos = [{
        regex: this.regexpUnescape,
        safeValue: function safeValue(val) {
          return regexSafe(val);
        }
      }, {
        regex: this.regexp,
        safeValue: function safeValue(val) {
          return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
        }
      }];
      todos.forEach(function(todo) {
        replaces = 0;
        while (match = todo.regex.exec(str)) {
          var matchedVar = match[1].trim();
          value = handleFormat(matchedVar);
          if (value === void 0) {
            if (typeof missingInterpolationHandler === "function") {
              var temp = missingInterpolationHandler(str, match, options);
              value = typeof temp === "string" ? temp : "";
            } else if (options && options.hasOwnProperty(matchedVar)) {
              value = "";
            } else if (skipOnVariables) {
              value = match[0];
              continue;
            } else {
              _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));
              value = "";
            }
          } else if (typeof value !== "string" && !_this.useRawValueToEscape) {
            value = makeString(value);
          }
          var safeValue = todo.safeValue(value);
          str = str.replace(match[0], safeValue);
          if (skipOnVariables) {
            todo.regex.lastIndex += value.length;
            todo.regex.lastIndex -= match[0].length;
          } else {
            todo.regex.lastIndex = 0;
          }
          replaces++;
          if (replaces >= _this.maxReplaces) {
            break;
          }
        }
      });
      return str;
    }
  }, {
    key: "nest",
    value: function nest(str, fc) {
      var _this2 = this;
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var match;
      var value;
      var clonedOptions = _objectSpread$3({}, options);
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      function handleHasOptions(key, inheritedOptions) {
        var sep = this.nestingOptionsSeparator;
        if (key.indexOf(sep) < 0)
          return key;
        var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
        var optionsString = "{".concat(c[1]);
        key = c[0];
        optionsString = this.interpolate(optionsString, clonedOptions);
        var matchedSingleQuotes = optionsString.match(/'/g);
        var matchedDoubleQuotes = optionsString.match(/"/g);
        if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
          optionsString = optionsString.replace(/'/g, '"');
        }
        try {
          clonedOptions = JSON.parse(optionsString);
          if (inheritedOptions)
            clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
        } catch (e) {
          this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
          return "".concat(key).concat(sep).concat(optionsString);
        }
        delete clonedOptions.defaultValue;
        return key;
      }
      while (match = this.nestingRegexp.exec(str)) {
        var formatters = [];
        var doReduce = false;
        if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
          var r = match[1].split(this.formatSeparator).map(function(elem) {
            return elem.trim();
          });
          match[1] = r.shift();
          formatters = r;
          doReduce = true;
        }
        value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
        if (value && match[0] === str && typeof value !== "string")
          return value;
        if (typeof value !== "string")
          value = makeString(value);
        if (!value) {
          this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
          value = "";
        }
        if (doReduce) {
          value = formatters.reduce(function(v, f) {
            return _this2.format(v, f, options.lng, _objectSpread$3(_objectSpread$3({}, options), {}, {
              interpolationkey: match[1].trim()
            }));
          }, value.trim());
        }
        str = str.replace(match[0], value);
        this.regexp.lastIndex = 0;
      }
      return str;
    }
  }]);
  return Interpolator2;
}();
function ownKeys$4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$4(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$4(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function parseFormatStr(formatStr) {
  var formatName = formatStr.toLowerCase().trim();
  var formatOptions = {};
  if (formatStr.indexOf("(") > -1) {
    var p = formatStr.split("(");
    formatName = p[0].toLowerCase().trim();
    var optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === "currency" && optStr.indexOf(":") < 0) {
      if (!formatOptions.currency)
        formatOptions.currency = optStr.trim();
    } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
      if (!formatOptions.range)
        formatOptions.range = optStr.trim();
    } else {
      var opts = optStr.split(";");
      opts.forEach(function(opt) {
        if (!opt)
          return;
        var _opt$split = opt.split(":"), _opt$split2 = _toArray(_opt$split), key = _opt$split2[0], rest = _opt$split2.slice(1);
        var val = rest.join(":").trim().replace(/^'+|'+$/g, "");
        if (!formatOptions[key.trim()])
          formatOptions[key.trim()] = val;
        if (val === "false")
          formatOptions[key.trim()] = false;
        if (val === "true")
          formatOptions[key.trim()] = true;
        if (!isNaN(val))
          formatOptions[key.trim()] = parseInt(val, 10);
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
}
function createCachedFormatter(fn) {
  var cache = {};
  return function invokeFormatter(val, lng, options) {
    var key = lng + JSON.stringify(options);
    var formatter = cache[key];
    if (!formatter) {
      formatter = fn(lng, options);
      cache[key] = formatter;
    }
    return formatter(val);
  };
}
var Formatter = function() {
  function Formatter2() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _classCallCheck(this, Formatter2);
    this.logger = baseLogger.create("formatter");
    this.options = options;
    this.formats = {
      number: createCachedFormatter(function(lng, options2) {
        var formatter = new Intl.NumberFormat(lng, options2);
        return function(val) {
          return formatter.format(val);
        };
      }),
      currency: createCachedFormatter(function(lng, options2) {
        var formatter = new Intl.NumberFormat(lng, _objectSpread$4(_objectSpread$4({}, options2), {}, {
          style: "currency"
        }));
        return function(val) {
          return formatter.format(val);
        };
      }),
      datetime: createCachedFormatter(function(lng, options2) {
        var formatter = new Intl.DateTimeFormat(lng, _objectSpread$4({}, options2));
        return function(val) {
          return formatter.format(val);
        };
      }),
      relativetime: createCachedFormatter(function(lng, options2) {
        var formatter = new Intl.RelativeTimeFormat(lng, _objectSpread$4({}, options2));
        return function(val) {
          return formatter.format(val, options2.range || "day");
        };
      }),
      list: createCachedFormatter(function(lng, options2) {
        var formatter = new Intl.ListFormat(lng, _objectSpread$4({}, options2));
        return function(val) {
          return formatter.format(val);
        };
      })
    };
    this.init(options);
  }
  _createClass(Formatter2, [{
    key: "init",
    value: function init2(services) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        interpolation: {}
      };
      var iOpts = options.interpolation;
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
    }
  }, {
    key: "add",
    value: function add(name, fc) {
      this.formats[name.toLowerCase().trim()] = fc;
    }
  }, {
    key: "addCached",
    value: function addCached(name, fc) {
      this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
    }
  }, {
    key: "format",
    value: function format(value, _format, lng, options) {
      var _this = this;
      var formats = _format.split(this.formatSeparator);
      var result = formats.reduce(function(mem, f) {
        var _parseFormatStr = parseFormatStr(f), formatName = _parseFormatStr.formatName, formatOptions = _parseFormatStr.formatOptions;
        if (_this.formats[formatName]) {
          var formatted = mem;
          try {
            var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
            var l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
            formatted = _this.formats[formatName](mem, l, _objectSpread$4(_objectSpread$4(_objectSpread$4({}, formatOptions), options), valOptions));
          } catch (error2) {
            _this.logger.warn(error2);
          }
          return formatted;
        } else {
          _this.logger.warn("there was no format function for ".concat(formatName));
        }
        return mem;
      }, value);
      return result;
    }
  }]);
  return Formatter2;
}();
function ownKeys$5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$5(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$5(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function removePending(q, name) {
  if (q.pending[name] !== void 0) {
    delete q.pending[name];
    q.pendingCount--;
  }
}
var Connector = function(_EventEmitter) {
  _inherits(Connector2, _EventEmitter);
  var _super = _createSuper$2(Connector2);
  function Connector2(backend, store, services) {
    var _this;
    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    _classCallCheck(this, Connector2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.backend = backend;
    _this.store = store;
    _this.services = services;
    _this.languageUtils = services.languageUtils;
    _this.options = options;
    _this.logger = baseLogger.create("backendConnector");
    _this.waitingReads = [];
    _this.maxParallelReads = options.maxParallelReads || 10;
    _this.readingCalls = 0;
    _this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
    _this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
    _this.state = {};
    _this.queue = [];
    if (_this.backend && _this.backend.init) {
      _this.backend.init(services, options.backend, options);
    }
    return _this;
  }
  _createClass(Connector2, [{
    key: "queueLoad",
    value: function queueLoad(languages, namespaces, options, callback) {
      var _this2 = this;
      var toLoad = {};
      var pending = {};
      var toLoadLanguages = {};
      var toLoadNamespaces = {};
      languages.forEach(function(lng) {
        var hasAllNamespaces = true;
        namespaces.forEach(function(ns) {
          var name = "".concat(lng, "|").concat(ns);
          if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
            _this2.state[name] = 2;
          } else if (_this2.state[name] < 0)
            ;
          else if (_this2.state[name] === 1) {
            if (pending[name] === void 0)
              pending[name] = true;
          } else {
            _this2.state[name] = 1;
            hasAllNamespaces = false;
            if (pending[name] === void 0)
              pending[name] = true;
            if (toLoad[name] === void 0)
              toLoad[name] = true;
            if (toLoadNamespaces[ns] === void 0)
              toLoadNamespaces[ns] = true;
          }
        });
        if (!hasAllNamespaces)
          toLoadLanguages[lng] = true;
      });
      if (Object.keys(toLoad).length || Object.keys(pending).length) {
        this.queue.push({
          pending,
          pendingCount: Object.keys(pending).length,
          loaded: {},
          errors: [],
          callback
        });
      }
      return {
        toLoad: Object.keys(toLoad),
        pending: Object.keys(pending),
        toLoadLanguages: Object.keys(toLoadLanguages),
        toLoadNamespaces: Object.keys(toLoadNamespaces)
      };
    }
  }, {
    key: "loaded",
    value: function loaded(name, err, data) {
      var s = name.split("|");
      var lng = s[0];
      var ns = s[1];
      if (err)
        this.emit("failedLoading", lng, ns, err);
      if (data) {
        this.store.addResourceBundle(lng, ns, data);
      }
      this.state[name] = err ? -1 : 2;
      var loaded2 = {};
      this.queue.forEach(function(q) {
        pushPath(q.loaded, [lng], ns);
        removePending(q, name);
        if (err)
          q.errors.push(err);
        if (q.pendingCount === 0 && !q.done) {
          Object.keys(q.loaded).forEach(function(l) {
            if (!loaded2[l])
              loaded2[l] = {};
            var loadedKeys = q.loaded[l];
            if (loadedKeys.length) {
              loadedKeys.forEach(function(ns2) {
                if (loaded2[l][ns2] === void 0)
                  loaded2[l][ns2] = true;
              });
            }
          });
          q.done = true;
          if (q.errors.length) {
            q.callback(q.errors);
          } else {
            q.callback();
          }
        }
      });
      this.emit("loaded", loaded2);
      this.queue = this.queue.filter(function(q) {
        return !q.done;
      });
    }
  }, {
    key: "read",
    value: function read(lng, ns, fcName) {
      var _this3 = this;
      var tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
      var callback = arguments.length > 5 ? arguments[5] : void 0;
      if (!lng.length)
        return callback(null, {});
      if (this.readingCalls >= this.maxParallelReads) {
        this.waitingReads.push({
          lng,
          ns,
          fcName,
          tried,
          wait,
          callback
        });
        return;
      }
      this.readingCalls++;
      return this.backend[fcName](lng, ns, function(err, data) {
        _this3.readingCalls--;
        if (_this3.waitingReads.length > 0) {
          var next = _this3.waitingReads.shift();
          _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
        }
        if (err && data && tried < _this3.maxRetries) {
          setTimeout(function() {
            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
          }, wait);
          return;
        }
        callback(err, data);
      });
    }
  }, {
    key: "prepareLoading",
    value: function prepareLoading(languages, namespaces) {
      var _this4 = this;
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : void 0;
      if (!this.backend) {
        this.logger.warn("No backend was added via i18next.use. Will not load resources.");
        return callback && callback();
      }
      if (typeof languages === "string")
        languages = this.languageUtils.toResolveHierarchy(languages);
      if (typeof namespaces === "string")
        namespaces = [namespaces];
      var toLoad = this.queueLoad(languages, namespaces, options, callback);
      if (!toLoad.toLoad.length) {
        if (!toLoad.pending.length)
          callback();
        return null;
      }
      toLoad.toLoad.forEach(function(name) {
        _this4.loadOne(name);
      });
    }
  }, {
    key: "load",
    value: function load(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {}, callback);
    }
  }, {
    key: "reload",
    value: function reload(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {
        reload: true
      }, callback);
    }
  }, {
    key: "loadOne",
    value: function loadOne(name) {
      var _this5 = this;
      var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var s = name.split("|");
      var lng = s[0];
      var ns = s[1];
      this.read(lng, ns, "read", void 0, void 0, function(err, data) {
        if (err)
          _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
        if (!err && data)
          _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
        _this5.loaded(name, err, data);
      });
    }
  }, {
    key: "saveMissing",
    value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
      var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
        this.logger.warn('did not save key "'.concat(key, '" as the namespace "').concat(namespace, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
        return;
      }
      if (key === void 0 || key === null || key === "")
        return;
      if (this.backend && this.backend.create) {
        this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options), {}, {
          isUpdate
        }));
      }
      if (!languages || !languages[0])
        return;
      this.store.addResource(languages[0], namespace, key, fallbackValue);
    }
  }]);
  return Connector2;
}(EventEmitter);
function get() {
  return {
    debug: false,
    initImmediate: true,
    ns: ["translation"],
    defaultNS: ["translation"],
    fallbackLng: ["dev"],
    fallbackNS: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: "all",
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: ".",
    nsSeparator: ":",
    pluralSeparator: "_",
    contextSeparator: "_",
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: "fallback",
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: true,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle2(args) {
      var ret = {};
      if (_typeof(args[1]) === "object")
        ret = args[1];
      if (typeof args[1] === "string")
        ret.defaultValue = args[1];
      if (typeof args[2] === "string")
        ret.tDescription = args[2];
      if (_typeof(args[2]) === "object" || _typeof(args[3]) === "object") {
        var options = args[3] || args[2];
        Object.keys(options).forEach(function(key) {
          ret[key] = options[key];
        });
      }
      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: function format(value, _format, lng, options) {
        return value;
      },
      prefix: "{{",
      suffix: "}}",
      formatSeparator: ",",
      unescapePrefix: "-",
      nestingPrefix: "$t(",
      nestingSuffix: ")",
      nestingOptionsSeparator: ",",
      maxReplaces: 1e3,
      skipOnVariables: true
    }
  };
}
function transformOptions(options) {
  if (typeof options.ns === "string")
    options.ns = [options.ns];
  if (typeof options.fallbackLng === "string")
    options.fallbackLng = [options.fallbackLng];
  if (typeof options.fallbackNS === "string")
    options.fallbackNS = [options.fallbackNS];
  if (options.supportedLngs && options.supportedLngs.indexOf("cimode") < 0) {
    options.supportedLngs = options.supportedLngs.concat(["cimode"]);
  }
  return options;
}
function ownKeys$6(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$6(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$6(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function noop() {
}
function bindMemberFunctions(inst) {
  var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach(function(mem) {
    if (typeof inst[mem] === "function") {
      inst[mem] = inst[mem].bind(inst);
    }
  });
}
var I18n = function(_EventEmitter) {
  _inherits(I18n2, _EventEmitter);
  var _super = _createSuper$3(I18n2);
  function I18n2() {
    var _this;
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : void 0;
    _classCallCheck(this, I18n2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.options = transformOptions(options);
    _this.services = {};
    _this.logger = baseLogger;
    _this.modules = {
      external: []
    };
    bindMemberFunctions(_assertThisInitialized(_this));
    if (callback && !_this.isInitialized && !options.isClone) {
      if (!_this.options.initImmediate) {
        _this.init(options, callback);
        return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
      }
      setTimeout(function() {
        _this.init(options, callback);
      }, 0);
    }
    return _this;
  }
  _createClass(I18n2, [{
    key: "init",
    value: function init2() {
      var _this2 = this;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : void 0;
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (!options.defaultNS && options.defaultNS !== false && options.ns) {
        if (typeof options.ns === "string") {
          options.defaultNS = options.ns;
        } else if (options.ns.indexOf("translation") < 0) {
          options.defaultNS = options.ns[0];
        }
      }
      var defOpts = get();
      this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options));
      if (this.options.compatibilityAPI !== "v1") {
        this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);
      }
      if (options.keySeparator !== void 0) {
        this.options.userDefinedKeySeparator = options.keySeparator;
      }
      if (options.nsSeparator !== void 0) {
        this.options.userDefinedNsSeparator = options.nsSeparator;
      }
      function createClassOnDemand(ClassOrObject) {
        if (!ClassOrObject)
          return null;
        if (typeof ClassOrObject === "function")
          return new ClassOrObject();
        return ClassOrObject;
      }
      if (!this.options.isClone) {
        if (this.modules.logger) {
          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
        } else {
          baseLogger.init(null, this.options);
        }
        var formatter;
        if (this.modules.formatter) {
          formatter = this.modules.formatter;
        } else if (typeof Intl !== "undefined") {
          formatter = Formatter;
        }
        var lu = new LanguageUtil(this.options);
        this.store = new ResourceStore(this.options.resources, this.options);
        var s = this.services;
        s.logger = baseLogger;
        s.resourceStore = this.store;
        s.languageUtils = lu;
        s.pluralResolver = new PluralResolver(lu, {
          prepend: this.options.pluralSeparator,
          compatibilityJSON: this.options.compatibilityJSON,
          simplifyPluralSuffix: this.options.simplifyPluralSuffix
        });
        if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
          s.formatter = createClassOnDemand(formatter);
          s.formatter.init(s, this.options);
          this.options.interpolation.format = s.formatter.format.bind(s.formatter);
        }
        s.interpolator = new Interpolator(this.options);
        s.utils = {
          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
        };
        s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
        s.backendConnector.on("*", function(event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          _this2.emit.apply(_this2, [event].concat(args));
        });
        if (this.modules.languageDetector) {
          s.languageDetector = createClassOnDemand(this.modules.languageDetector);
          s.languageDetector.init(s, this.options.detection, this.options);
        }
        if (this.modules.i18nFormat) {
          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
          if (s.i18nFormat.init)
            s.i18nFormat.init(this);
        }
        this.translator = new Translator(this.services, this.options);
        this.translator.on("*", function(event) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          _this2.emit.apply(_this2, [event].concat(args));
        });
        this.modules.external.forEach(function(m) {
          if (m.init)
            m.init(_this2);
        });
      }
      this.format = this.options.interpolation.format;
      if (!callback)
        callback = noop;
      if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
        var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        if (codes.length > 0 && codes[0] !== "dev")
          this.options.lng = codes[0];
      }
      if (!this.services.languageDetector && !this.options.lng) {
        this.logger.warn("init: no languageDetector is used and no lng is defined");
      }
      var storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
      storeApi.forEach(function(fcName) {
        _this2[fcName] = function() {
          var _this2$store;
          return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
        };
      });
      var storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
      storeApiChained.forEach(function(fcName) {
        _this2[fcName] = function() {
          var _this2$store2;
          (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
          return _this2;
        };
      });
      var deferred = defer();
      var load = function load2() {
        var finish = function finish2(err, t2) {
          if (_this2.isInitialized && !_this2.initializedStoreOnce)
            _this2.logger.warn("init: i18next is already initialized. You should call init just once!");
          _this2.isInitialized = true;
          if (!_this2.options.isClone)
            _this2.logger.log("initialized", _this2.options);
          _this2.emit("initialized", _this2.options);
          deferred.resolve(t2);
          callback(err, t2);
        };
        if (_this2.languages && _this2.options.compatibilityAPI !== "v1" && !_this2.isInitialized)
          return finish(null, _this2.t.bind(_this2));
        _this2.changeLanguage(_this2.options.lng, finish);
      };
      if (this.options.resources || !this.options.initImmediate) {
        load();
      } else {
        setTimeout(load, 0);
      }
      return deferred;
    }
  }, {
    key: "loadResources",
    value: function loadResources2(language) {
      var _this3 = this;
      var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
      var usedCallback = callback;
      var usedLng = typeof language === "string" ? language : this.language;
      if (typeof language === "function")
        usedCallback = language;
      if (!this.options.resources || this.options.partialBundledLanguages) {
        if (usedLng && usedLng.toLowerCase() === "cimode")
          return usedCallback();
        var toLoad = [];
        var append = function append2(lng) {
          if (!lng)
            return;
          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
          lngs.forEach(function(l) {
            if (toLoad.indexOf(l) < 0)
              toLoad.push(l);
          });
        };
        if (!usedLng) {
          var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          fallbacks.forEach(function(l) {
            return append(l);
          });
        } else {
          append(usedLng);
        }
        if (this.options.preload) {
          this.options.preload.forEach(function(l) {
            return append(l);
          });
        }
        this.services.backendConnector.load(toLoad, this.options.ns, function(e) {
          if (!e && !_this3.resolvedLanguage && _this3.language)
            _this3.setResolvedLanguage(_this3.language);
          usedCallback(e);
        });
      } else {
        usedCallback(null);
      }
    }
  }, {
    key: "reloadResources",
    value: function reloadResources2(lngs, ns, callback) {
      var deferred = defer();
      if (!lngs)
        lngs = this.languages;
      if (!ns)
        ns = this.options.ns;
      if (!callback)
        callback = noop;
      this.services.backendConnector.reload(lngs, ns, function(err) {
        deferred.resolve();
        callback(err);
      });
      return deferred;
    }
  }, {
    key: "use",
    value: function use2(module) {
      if (!module)
        throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
      if (!module.type)
        throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
      if (module.type === "backend") {
        this.modules.backend = module;
      }
      if (module.type === "logger" || module.log && module.warn && module.error) {
        this.modules.logger = module;
      }
      if (module.type === "languageDetector") {
        this.modules.languageDetector = module;
      }
      if (module.type === "i18nFormat") {
        this.modules.i18nFormat = module;
      }
      if (module.type === "postProcessor") {
        postProcessor.addPostProcessor(module);
      }
      if (module.type === "formatter") {
        this.modules.formatter = module;
      }
      if (module.type === "3rdParty") {
        this.modules.external.push(module);
      }
      return this;
    }
  }, {
    key: "setResolvedLanguage",
    value: function setResolvedLanguage(l) {
      if (!l || !this.languages)
        return;
      if (["cimode", "dev"].indexOf(l) > -1)
        return;
      for (var li = 0; li < this.languages.length; li++) {
        var lngInLngs = this.languages[li];
        if (["cimode", "dev"].indexOf(lngInLngs) > -1)
          continue;
        if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
          this.resolvedLanguage = lngInLngs;
          break;
        }
      }
    }
  }, {
    key: "changeLanguage",
    value: function changeLanguage2(lng, callback) {
      var _this4 = this;
      this.isLanguageChangingTo = lng;
      var deferred = defer();
      this.emit("languageChanging", lng);
      var setLngProps = function setLngProps2(l) {
        _this4.language = l;
        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
        _this4.resolvedLanguage = void 0;
        _this4.setResolvedLanguage(l);
      };
      var done = function done2(err, l) {
        if (l) {
          setLngProps(l);
          _this4.translator.changeLanguage(l);
          _this4.isLanguageChangingTo = void 0;
          _this4.emit("languageChanged", l);
          _this4.logger.log("languageChanged", l);
        } else {
          _this4.isLanguageChangingTo = void 0;
        }
        deferred.resolve(function() {
          return _this4.t.apply(_this4, arguments);
        });
        if (callback)
          callback(err, function() {
            return _this4.t.apply(_this4, arguments);
          });
      };
      var setLng = function setLng2(lngs) {
        if (!lng && !lngs && _this4.services.languageDetector)
          lngs = [];
        var l = typeof lngs === "string" ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
        if (l) {
          if (!_this4.language) {
            setLngProps(l);
          }
          if (!_this4.translator.language)
            _this4.translator.changeLanguage(l);
          if (_this4.services.languageDetector)
            _this4.services.languageDetector.cacheUserLanguage(l);
        }
        _this4.loadResources(l, function(err) {
          done(err, l);
        });
      };
      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
        setLng(this.services.languageDetector.detect());
      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
        this.services.languageDetector.detect(setLng);
      } else {
        setLng(lng);
      }
      return deferred;
    }
  }, {
    key: "getFixedT",
    value: function getFixedT2(lng, ns, keyPrefix) {
      var _this5 = this;
      var fixedT = function fixedT2(key, opts) {
        var options;
        if (_typeof(opts) !== "object") {
          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            rest[_key3 - 2] = arguments[_key3];
          }
          options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
        } else {
          options = _objectSpread$6({}, opts);
        }
        options.lng = options.lng || fixedT2.lng;
        options.lngs = options.lngs || fixedT2.lngs;
        options.ns = options.ns || fixedT2.ns;
        options.keyPrefix = options.keyPrefix || keyPrefix || fixedT2.keyPrefix;
        var keySeparator = _this5.options.keySeparator || ".";
        var resultKey = options.keyPrefix ? "".concat(options.keyPrefix).concat(keySeparator).concat(key) : key;
        return _this5.t(resultKey, options);
      };
      if (typeof lng === "string") {
        fixedT.lng = lng;
      } else {
        fixedT.lngs = lng;
      }
      fixedT.ns = ns;
      fixedT.keyPrefix = keyPrefix;
      return fixedT;
    }
  }, {
    key: "t",
    value: function t2() {
      var _this$translator;
      return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
    }
  }, {
    key: "exists",
    value: function exists2() {
      var _this$translator2;
      return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
    }
  }, {
    key: "setDefaultNamespace",
    value: function setDefaultNamespace2(ns) {
      this.options.defaultNS = ns;
    }
  }, {
    key: "hasLoadedNamespace",
    value: function hasLoadedNamespace2(ns) {
      var _this6 = this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (!this.isInitialized) {
        this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
        return false;
      }
      if (!this.languages || !this.languages.length) {
        this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
        return false;
      }
      var lng = this.resolvedLanguage || this.languages[0];
      var fallbackLng = this.options ? this.options.fallbackLng : false;
      var lastLng = this.languages[this.languages.length - 1];
      if (lng.toLowerCase() === "cimode")
        return true;
      var loadNotPending = function loadNotPending2(l, n) {
        var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];
        return loadState === -1 || loadState === 2;
      };
      if (options.precheck) {
        var preResult = options.precheck(this, loadNotPending);
        if (preResult !== void 0)
          return preResult;
      }
      if (this.hasResourceBundle(lng, ns))
        return true;
      if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages)
        return true;
      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))
        return true;
      return false;
    }
  }, {
    key: "loadNamespaces",
    value: function loadNamespaces2(ns, callback) {
      var _this7 = this;
      var deferred = defer();
      if (!this.options.ns) {
        callback && callback();
        return Promise.resolve();
      }
      if (typeof ns === "string")
        ns = [ns];
      ns.forEach(function(n) {
        if (_this7.options.ns.indexOf(n) < 0)
          _this7.options.ns.push(n);
      });
      this.loadResources(function(err) {
        deferred.resolve();
        if (callback)
          callback(err);
      });
      return deferred;
    }
  }, {
    key: "loadLanguages",
    value: function loadLanguages2(lngs, callback) {
      var deferred = defer();
      if (typeof lngs === "string")
        lngs = [lngs];
      var preloaded = this.options.preload || [];
      var newLngs = lngs.filter(function(lng) {
        return preloaded.indexOf(lng) < 0;
      });
      if (!newLngs.length) {
        if (callback)
          callback();
        return Promise.resolve();
      }
      this.options.preload = preloaded.concat(newLngs);
      this.loadResources(function(err) {
        deferred.resolve();
        if (callback)
          callback(err);
      });
      return deferred;
    }
  }, {
    key: "dir",
    value: function dir(lng) {
      if (!lng)
        lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
      if (!lng)
        return "rtl";
      var rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
      return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
    }
  }, {
    key: "cloneInstance",
    value: function cloneInstance() {
      var _this8 = this;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
      var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options), {
        isClone: true
      });
      var clone = new I18n2(mergedOptions);
      if (options.debug !== void 0 || options.prefix !== void 0) {
        clone.logger = clone.logger.clone(options);
      }
      var membersToCopy = ["store", "services", "language"];
      membersToCopy.forEach(function(m) {
        clone[m] = _this8[m];
      });
      clone.services = _objectSpread$6({}, this.services);
      clone.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      clone.translator = new Translator(clone.services, clone.options);
      clone.translator.on("*", function(event) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        clone.emit.apply(clone, [event].concat(args));
      });
      clone.init(mergedOptions, callback);
      clone.translator.options = clone.options;
      clone.translator.backendConnector.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      return clone;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        options: this.options,
        store: this.store,
        language: this.language,
        languages: this.languages,
        resolvedLanguage: this.resolvedLanguage
      };
    }
  }]);
  return I18n2;
}(EventEmitter);
_defineProperty(I18n, "createInstance", function() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var callback = arguments.length > 1 ? arguments[1] : void 0;
  return new I18n(options, callback);
});
var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
var createInstance = instance.createInstance;
var init = instance.init;
var loadResources = instance.loadResources;
var reloadResources = instance.reloadResources;
var use = instance.use;
var changeLanguage = instance.changeLanguage;
var getFixedT = instance.getFixedT;
var t = instance.t;
var exists = instance.exists;
var setDefaultNamespace = instance.setDefaultNamespace;
var hasLoadedNamespace = instance.hasLoadedNamespace;
var loadNamespaces = instance.loadNamespaces;
var loadLanguages = instance.loadLanguages;
var i18next_default = instance;

// node_modules/stream-chat-react/dist/i18n/Streami18n.js
var import_dayjs = __toESM(require_dayjs_min());
var import_calendar = __toESM(require_calendar());
var import_updateLocale = __toESM(require_updateLocale());
var import_localizedFormat = __toESM(require_localizedFormat());
var import_localeData = __toESM(require_localeData());
var import_relativeTime = __toESM(require_relativeTime());
var import_utc = __toESM(require_utc());
var import_timezone = __toESM(require_timezone());
var import_de2 = __toESM(require_de());
var import_es2 = __toESM(require_es());
var import_fr2 = __toESM(require_fr());
var import_hi2 = __toESM(require_hi());
var import_it2 = __toESM(require_it());
var import_ja2 = __toESM(require_ja());
var import_ko2 = __toESM(require_ko());
var import_nl2 = __toESM(require_nl());
var import_pt2 = __toESM(require_pt());
var import_ru2 = __toESM(require_ru());
var import_tr2 = __toESM(require_tr());
var import_en2 = __toESM(require_en());
var defaultNS = "translation";
var defaultLng = "en";
import_dayjs.default.extend(import_updateLocale.default);
import_dayjs.default.extend(import_utc.default);
import_dayjs.default.extend(import_timezone.default);
import_dayjs.default.updateLocale("de", {
  calendar: {
    lastDay: "[gestern um] LT",
    lastWeek: "[letzten] dddd [um] LT",
    nextDay: "[morgen um] LT",
    nextWeek: "dddd [um] LT",
    sameDay: "[heute um] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("es", {
  calendar: {
    lastDay: "[ayer a las] LT",
    lastWeek: "[pasado] dddd [a] LT",
    nextDay: "[mañana a] LT",
    nextWeek: "dddd [a] LT",
    sameDay: "[hoy a las] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("fr", {
  calendar: {
    lastDay: "[Hier à] LT",
    lastWeek: "dddd [dernier à] LT",
    nextDay: "[Demain à] LT",
    nextWeek: "dddd [à] LT",
    sameDay: "[Aujourd’hui à] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("hi", {
  calendar: {
    lastDay: "[कल] LT",
    lastWeek: "[पिछले] dddd, LT",
    nextDay: "[कल] LT",
    nextWeek: "dddd, LT",
    sameDay: "[आज] LT",
    sameElse: "L"
  },
  // Hindi notation for meridiems are quite fuzzy in practice. While there exists
  // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
  meridiem: function(hour) {
    if (hour < 4) {
      return "रात";
    } else if (hour < 10) {
      return "सुबह";
    } else if (hour < 17) {
      return "दोपहर";
    } else if (hour < 20) {
      return "शाम";
    } else {
      return "रात";
    }
  },
  meridiemHour: function(hour, meridiem) {
    if (hour === 12) {
      hour = 0;
    }
    if (meridiem === "रात") {
      return hour < 4 ? hour : hour + 12;
    } else if (meridiem === "सुबह") {
      return hour;
    } else if (meridiem === "दोपहर") {
      return hour >= 10 ? hour : hour + 12;
    } else if (meridiem === "शाम") {
      return hour + 12;
    }
    return hour;
  },
  meridiemParse: /रात|सुबह|दोपहर|शाम/
});
import_dayjs.default.updateLocale("it", {
  calendar: {
    lastDay: "[Ieri alle] LT",
    lastWeek: "[lo scorso] dddd [alle] LT",
    nextDay: "[Domani alle] LT",
    nextWeek: "dddd [alle] LT",
    sameDay: "[Oggi alle] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("ja", {
  calendar: {
    lastDay: "[昨日] LT",
    lastWeek: "dddd LT",
    nextDay: "[明日] LT",
    nextWeek: "[次の] dddd LT",
    sameDay: "[今日] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("ko", {
  calendar: {
    lastDay: "[어제] LT",
    lastWeek: "[지난] dddd LT",
    nextDay: "[내일] LT",
    nextWeek: "dddd LT",
    sameDay: "[오늘] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("nl", {
  calendar: {
    lastDay: "[gisteren om] LT",
    lastWeek: "[afgelopen] dddd [om] LT",
    nextDay: "[morgen om] LT",
    nextWeek: "dddd [om] LT",
    sameDay: "[vandaag om] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("pt", {
  calendar: {
    lastDay: "[ontem às] LT",
    lastWeek: "dddd [passada às] LT",
    nextDay: "[amanhã às] LT",
    nextWeek: "dddd [às] LT",
    sameDay: "[hoje às] LT",
    sameElse: "L"
  }
});
import_dayjs.default.updateLocale("ru", {
  calendar: {
    lastDay: "[Вчера, в] LT",
    nextDay: "[Завтра, в] LT",
    sameDay: "[Сегодня, в] LT"
  }
});
import_dayjs.default.updateLocale("tr", {
  calendar: {
    lastDay: "[dün] LT",
    lastWeek: "[geçen] dddd [saat] LT",
    nextDay: "[yarın saat] LT",
    nextWeek: "[gelecek] dddd [saat] LT",
    sameDay: "[bugün saat] LT",
    sameElse: "L"
  }
});
var en_locale = {
  formats: {},
  months: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  relativeTime: {},
  weekdays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var isDayJs = function(dateTimeParser) {
  return dateTimeParser.extend !== void 0;
};
var supportsTz = function(dateTimeParser) {
  return dateTimeParser.tz !== void 0;
};
var defaultStreami18nOptions = {
  DateTimeParser: import_dayjs.default,
  dayjsLocaleConfigForLanguage: null,
  debug: false,
  disableDateTimeTranslations: false,
  language: "en",
  logger: function(message) {
    return console.warn(message);
  }
};
var defaultTranslatorFunction = function(key) {
  return key;
};
var Streami18n = (
  /** @class */
  function() {
    function Streami18n2(options) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
      if (options === void 0) {
        options = {};
      }
      var _this = this;
      this.i18nInstance = i18next_default.createInstance();
      this.Dayjs = null;
      this.setLanguageCallback = function() {
        return null;
      };
      this.initialized = false;
      this.t = defaultTranslatorFunction;
      this.translations = {
        de: (_a = {}, _a[defaultNS] = de_default, _a),
        en: (_b = {}, _b[defaultNS] = en_default, _b),
        es: (_c = {}, _c[defaultNS] = es_default, _c),
        fr: (_d = {}, _d[defaultNS] = fr_default, _d),
        hi: (_e = {}, _e[defaultNS] = hi_default, _e),
        it: (_f = {}, _f[defaultNS] = it_default, _f),
        ja: (_g = {}, _g[defaultNS] = ja_default, _g),
        ko: (_h = {}, _h[defaultNS] = ko_default, _h),
        nl: (_j = {}, _j[defaultNS] = nl_default, _j),
        pt: (_k = {}, _k[defaultNS] = pt_default, _k),
        ru: (_l = {}, _l[defaultNS] = ru_default, _l),
        tr: (_m = {}, _m[defaultNS] = tr_default, _m)
      };
      this.dayjsLocales = {};
      this.localeExists = function(language) {
        if (_this.isCustomDateTimeParser)
          return true;
        return Object.keys(import_dayjs.default.Ls).indexOf(language) > -1;
      };
      this.validateCurrentLanguage = function() {
        var availableLanguages = Object.keys(_this.translations);
        if (availableLanguages.indexOf(_this.currentLanguage) === -1) {
          _this.logger("Streami18n: '".concat(_this.currentLanguage, "' language is not registered.") + " Please make sure to call streami18n.registerTranslation('".concat(_this.currentLanguage, "', {...}) or ") + "use one the built-in supported languages - ".concat(_this.getAvailableLanguages()));
          _this.currentLanguage = defaultLng;
        }
      };
      this.geti18Instance = function() {
        return _this.i18nInstance;
      };
      this.getAvailableLanguages = function() {
        return Object.keys(_this.translations);
      };
      this.getTranslations = function() {
        return _this.translations;
      };
      var finalOptions = __assign(__assign({}, defaultStreami18nOptions), options);
      this.logger = finalOptions.logger;
      this.currentLanguage = finalOptions.language;
      this.DateTimeParser = finalOptions.DateTimeParser;
      this.timezone = finalOptions.timezone;
      try {
        if (this.DateTimeParser && isDayJs(this.DateTimeParser)) {
          this.DateTimeParser.extend(import_localizedFormat.default);
          this.DateTimeParser.extend(import_calendar.default);
          this.DateTimeParser.extend(import_localeData.default);
          this.DateTimeParser.extend(import_relativeTime.default);
        }
      } catch (error2) {
        throw Error("Streami18n: Looks like you wanted to provide Dayjs instance, but something went wrong while adding plugins ".concat(error2));
      }
      this.isCustomDateTimeParser = !!options.DateTimeParser;
      var translationsForLanguage = finalOptions.translationsForLanguage;
      if (translationsForLanguage) {
        this.translations[this.currentLanguage] = (_o = {}, _o[defaultNS] = this.translations[this.currentLanguage] && this.translations[this.currentLanguage][defaultNS] ? __assign(__assign({}, this.translations[this.currentLanguage][defaultNS]), translationsForLanguage) : translationsForLanguage, _o);
      }
      if (!this.translations[this.currentLanguage]) {
        this.translations[this.currentLanguage] = (_p = {}, _p[defaultNS] = {}, _p);
      }
      this.i18nextConfig = {
        debug: finalOptions.debug,
        fallbackLng: false,
        interpolation: { escapeValue: false },
        keySeparator: false,
        lng: this.currentLanguage,
        nsSeparator: false
      };
      if (finalOptions.parseMissingKeyHandler) {
        this.i18nextConfig.parseMissingKeyHandler = finalOptions.parseMissingKeyHandler;
      }
      this.validateCurrentLanguage();
      var dayjsLocaleConfigForLanguage = finalOptions.dayjsLocaleConfigForLanguage;
      if (dayjsLocaleConfigForLanguage) {
        this.addOrUpdateLocale(this.currentLanguage, __assign({}, dayjsLocaleConfigForLanguage));
      } else if (!this.localeExists(this.currentLanguage)) {
        this.logger("Streami18n: Streami18n(...) - Locale config for ".concat(this.currentLanguage, " does not exist in momentjs.") + `Please import the locale file using "import 'moment/locale/`.concat(this.currentLanguage, `';" in your app or `) + "register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)");
      }
      this.tDateTimeParser = function(timestamp) {
        var language = finalOptions.disableDateTimeTranslations || !_this.localeExists(_this.currentLanguage) ? defaultLng : _this.currentLanguage;
        if (isDayJs(_this.DateTimeParser)) {
          return supportsTz(_this.DateTimeParser) ? _this.DateTimeParser(timestamp).tz(_this.timezone).locale(language) : _this.DateTimeParser(timestamp).locale(language);
        }
        if (supportsTz(_this.DateTimeParser) && _this.timezone) {
          return _this.DateTimeParser(timestamp).tz(_this.timezone).locale(language);
        }
        return _this.DateTimeParser(timestamp).locale(language);
      };
    }
    Streami18n2.prototype.init = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a, error_1;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              this.validateCurrentLanguage();
              _b.label = 1;
            case 1:
              _b.trys.push([1, 3, , 4]);
              _a = this;
              return [4, this.i18nInstance.init(__assign(__assign({}, this.i18nextConfig), { lng: this.currentLanguage, resources: this.translations }))];
            case 2:
              _a.t = _b.sent();
              this.initialized = true;
              return [3, 4];
            case 3:
              error_1 = _b.sent();
              this.logger("Something went wrong with init: ".concat(JSON.stringify(error_1)));
              return [3, 4];
            case 4:
              return [2, {
                t: this.t,
                tDateTimeParser: this.tDateTimeParser
              }];
          }
        });
      });
    };
    Streami18n2.prototype.getTranslators = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!this.initialized)
                return [3, 2];
              if (this.dayjsLocales[this.currentLanguage]) {
                this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
              }
              return [4, this.init()];
            case 1:
              return [2, _a.sent()];
            case 2:
              return [2, {
                t: this.t,
                tDateTimeParser: this.tDateTimeParser
              }];
          }
        });
      });
    };
    Streami18n2.prototype.registerTranslation = function(language, translation, customDayjsLocale) {
      var _a;
      if (!translation) {
        this.logger("Streami18n: registerTranslation(language, translation, customDayjsLocale) called without translation");
        return;
      }
      if (!this.translations[language]) {
        this.translations[language] = (_a = {}, _a[defaultNS] = translation, _a);
      } else {
        this.translations[language][defaultNS] = translation;
      }
      if (customDayjsLocale) {
        this.dayjsLocales[language] = __assign({}, customDayjsLocale);
      } else if (!this.localeExists(language)) {
        this.logger("Streami18n: registerTranslation(language, translation, customDayjsLocale) - " + "Locale config for ".concat(language, " does not exist in Dayjs.") + `Please import the locale file using "import 'dayjs/locale/`.concat(language, `';" in your app or `) + "register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)");
      }
      if (this.initialized) {
        this.i18nInstance.addResources(language, defaultNS, translation);
      }
    };
    Streami18n2.prototype.addOrUpdateLocale = function(key, config) {
      if (this.localeExists(key)) {
        import_dayjs.default.updateLocale(key, __assign({}, config));
      } else {
        import_dayjs.default.locale(__assign(__assign({ name: key }, en_locale), config), void 0, true);
      }
    };
    Streami18n2.prototype.setLanguage = function(language) {
      return __awaiter(this, void 0, void 0, function() {
        var t2, error_2;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.currentLanguage = language;
              if (!this.initialized)
                return [
                  2
                  /*return*/
                ];
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this.i18nInstance.changeLanguage(language)];
            case 2:
              t2 = _a.sent();
              if (this.dayjsLocales[language]) {
                this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
              }
              this.setLanguageCallback(t2);
              return [2, t2];
            case 3:
              error_2 = _a.sent();
              this.logger("Failed to set language: ".concat(JSON.stringify(error_2)));
              return [2, this.t];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Streami18n2.prototype.registerSetLanguageCallback = function(callback) {
      this.setLanguageCallback = callback;
    };
    return Streami18n2;
  }()
);

// node_modules/stream-chat-react/dist/context/TranslationContext.js
import_dayjs2.default.extend(import_calendar2.default);
import_dayjs2.default.extend(import_localizedFormat2.default);
var isLanguageSupported = function(language) {
  var translations = ["de", "en", "es", "fr", "hi", "it", "ja", "ko", "nl", "pt", "ru", "tr"];
  return translations.some(function(translation) {
    return language === translation;
  });
};
var isDayOrMoment = function(output2) {
  return !!(output2 === null || output2 === void 0 ? void 0 : output2.isSame);
};
var isDate = function(output2) {
  return !!(output2 === null || output2 === void 0 ? void 0 : output2.getMonth);
};
var isNumberOrString = function(output2) {
  return typeof output2 === "string" || typeof output2 === "number";
};
var defaultDateTimeParser = function(input) {
  return (0, import_dayjs2.default)(input);
};
var TranslationContext = import_react10.default.createContext({
  t: defaultTranslatorFunction,
  tDateTimeParser: defaultDateTimeParser,
  userLanguage: "en"
});
var TranslationProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react10.default.createElement(TranslationContext.Provider, { value }, children);
};
var useTranslationContext = function(componentName) {
  var contextValue = (0, import_react10.useContext)(TranslationContext);
  if (!contextValue) {
    console.warn("The useTranslationContext hook was called outside of the TranslationContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withTranslationContext = function(Component) {
  var WithTranslationContextComponent = function(props) {
    var translationContext = useTranslationContext();
    return import_react10.default.createElement(Component, __assign({}, props, translationContext));
  };
  WithTranslationContextComponent.displayName = "WithTranslationContext".concat(getDisplayName(Component));
  return WithTranslationContextComponent;
};

// node_modules/stream-chat-react/dist/context/TypingContext.js
var import_react11 = __toESM(require_react());
var TypingContext = import_react11.default.createContext(void 0);
var TypingProvider = function(_a) {
  var children = _a.children, value = _a.value;
  return import_react11.default.createElement(TypingContext.Provider, { value }, children);
};
var useTypingContext = function(componentName) {
  var contextValue = (0, import_react11.useContext)(TypingContext);
  if (!contextValue) {
    console.warn("The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
    return {};
  }
  return contextValue;
};
var withTypingContext = function(Component) {
  var WithTypingContextComponent = function(props) {
    var typingContext = useTypingContext();
    return import_react11.default.createElement(Component, __assign({}, props, typingContext));
  };
  WithTypingContextComponent.displayName = (Component.displayName || Component.name || "Component").replace("Base", "");
  return WithTypingContextComponent;
};

export {
  __extends,
  __assign,
  __rest,
  __awaiter,
  __generator,
  __spreadArray,
  ChannelActionContext,
  ChannelActionProvider,
  useChannelActionContext,
  withChannelActionContext,
  ChannelListContext,
  ChannelListContextProvider,
  useChannelListContext,
  ChannelStateContext,
  ChannelStateProvider,
  useChannelStateContext,
  withChannelStateContext,
  ChatContext,
  ChatProvider,
  useChatContext,
  withChatContext,
  ComponentContext,
  ComponentProvider,
  useComponentContext,
  withComponentContext,
  EmojiContext,
  EmojiProvider,
  useEmojiContext,
  withEmojiContext,
  MessageContext,
  MessageProvider,
  useMessageContext,
  withMessageContext,
  MessageInputContext,
  MessageInputContextProvider,
  useMessageInputContext,
  MessageListContext,
  MessageListContextProvider,
  useMessageListContext,
  de_default,
  en_default,
  es_default,
  fr_default,
  hi_default,
  it_default,
  ja_default,
  ko_default,
  nl_default,
  pt_default,
  ru_default,
  tr_default,
  defaultTranslatorFunction,
  Streami18n,
  isLanguageSupported,
  isDayOrMoment,
  isDate,
  isNumberOrString,
  defaultDateTimeParser,
  TranslationContext,
  TranslationProvider,
  useTranslationContext,
  withTranslationContext,
  TypingContext,
  TypingProvider,
  useTypingContext,
  withTypingContext
};
//# sourceMappingURL=chunk-NHKGCQYD.js.map
